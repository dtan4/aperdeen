// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/aws/aws-sdk-go/service/apigateway/apigatewayiface/interface.go

// Package apigateway is a generated GoMock package.
package apigateway

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	apigateway "github.com/aws/aws-sdk-go/service/apigateway"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAPIGatewayAPI is a mock of APIGatewayAPI interface
type MockAPIGatewayAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIGatewayAPIMockRecorder
}

// MockAPIGatewayAPIMockRecorder is the mock recorder for MockAPIGatewayAPI
type MockAPIGatewayAPIMockRecorder struct {
	mock *MockAPIGatewayAPI
}

// NewMockAPIGatewayAPI creates a new mock instance
func NewMockAPIGatewayAPI(ctrl *gomock.Controller) *MockAPIGatewayAPI {
	mock := &MockAPIGatewayAPI{ctrl: ctrl}
	mock.recorder = &MockAPIGatewayAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPIGatewayAPI) EXPECT() *MockAPIGatewayAPIMockRecorder {
	return m.recorder
}

// CreateApiKey mocks base method
func (m *MockAPIGatewayAPI) CreateApiKey(arg0 *apigateway.CreateApiKeyInput) (*apigateway.ApiKey, error) {
	ret := m.ctrl.Call(m, "CreateApiKey", arg0)
	ret0, _ := ret[0].(*apigateway.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApiKey indicates an expected call of CreateApiKey
func (mr *MockAPIGatewayAPIMockRecorder) CreateApiKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiKey", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateApiKey), arg0)
}

// CreateApiKeyWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateApiKeyWithContext(arg0 aws.Context, arg1 *apigateway.CreateApiKeyInput, arg2 ...request.Option) (*apigateway.ApiKey, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApiKeyWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApiKeyWithContext indicates an expected call of CreateApiKeyWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateApiKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiKeyWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateApiKeyWithContext), varargs...)
}

// CreateApiKeyRequest mocks base method
func (m *MockAPIGatewayAPI) CreateApiKeyRequest(arg0 *apigateway.CreateApiKeyInput) (*request.Request, *apigateway.ApiKey) {
	ret := m.ctrl.Call(m, "CreateApiKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.ApiKey)
	return ret0, ret1
}

// CreateApiKeyRequest indicates an expected call of CreateApiKeyRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateApiKeyRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiKeyRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateApiKeyRequest), arg0)
}

// CreateAuthorizer mocks base method
func (m *MockAPIGatewayAPI) CreateAuthorizer(arg0 *apigateway.CreateAuthorizerInput) (*apigateway.Authorizer, error) {
	ret := m.ctrl.Call(m, "CreateAuthorizer", arg0)
	ret0, _ := ret[0].(*apigateway.Authorizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthorizer indicates an expected call of CreateAuthorizer
func (mr *MockAPIGatewayAPIMockRecorder) CreateAuthorizer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizer", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateAuthorizer), arg0)
}

// CreateAuthorizerWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateAuthorizerWithContext(arg0 aws.Context, arg1 *apigateway.CreateAuthorizerInput, arg2 ...request.Option) (*apigateway.Authorizer, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Authorizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthorizerWithContext indicates an expected call of CreateAuthorizerWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizerWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateAuthorizerWithContext), varargs...)
}

// CreateAuthorizerRequest mocks base method
func (m *MockAPIGatewayAPI) CreateAuthorizerRequest(arg0 *apigateway.CreateAuthorizerInput) (*request.Request, *apigateway.Authorizer) {
	ret := m.ctrl.Call(m, "CreateAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Authorizer)
	return ret0, ret1
}

// CreateAuthorizerRequest indicates an expected call of CreateAuthorizerRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateAuthorizerRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizerRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateAuthorizerRequest), arg0)
}

// CreateBasePathMapping mocks base method
func (m *MockAPIGatewayAPI) CreateBasePathMapping(arg0 *apigateway.CreateBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	ret := m.ctrl.Call(m, "CreateBasePathMapping", arg0)
	ret0, _ := ret[0].(*apigateway.BasePathMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBasePathMapping indicates an expected call of CreateBasePathMapping
func (mr *MockAPIGatewayAPIMockRecorder) CreateBasePathMapping(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBasePathMapping", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateBasePathMapping), arg0)
}

// CreateBasePathMappingWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateBasePathMappingWithContext(arg0 aws.Context, arg1 *apigateway.CreateBasePathMappingInput, arg2 ...request.Option) (*apigateway.BasePathMapping, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBasePathMappingWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.BasePathMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBasePathMappingWithContext indicates an expected call of CreateBasePathMappingWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateBasePathMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBasePathMappingWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateBasePathMappingWithContext), varargs...)
}

// CreateBasePathMappingRequest mocks base method
func (m *MockAPIGatewayAPI) CreateBasePathMappingRequest(arg0 *apigateway.CreateBasePathMappingInput) (*request.Request, *apigateway.BasePathMapping) {
	ret := m.ctrl.Call(m, "CreateBasePathMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.BasePathMapping)
	return ret0, ret1
}

// CreateBasePathMappingRequest indicates an expected call of CreateBasePathMappingRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateBasePathMappingRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBasePathMappingRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateBasePathMappingRequest), arg0)
}

// CreateDeployment mocks base method
func (m *MockAPIGatewayAPI) CreateDeployment(arg0 *apigateway.CreateDeploymentInput) (*apigateway.Deployment, error) {
	ret := m.ctrl.Call(m, "CreateDeployment", arg0)
	ret0, _ := ret[0].(*apigateway.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment
func (mr *MockAPIGatewayAPIMockRecorder) CreateDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateDeployment), arg0)
}

// CreateDeploymentWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateDeploymentWithContext(arg0 aws.Context, arg1 *apigateway.CreateDeploymentInput, arg2 ...request.Option) (*apigateway.Deployment, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentWithContext indicates an expected call of CreateDeploymentWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateDeploymentWithContext), varargs...)
}

// CreateDeploymentRequest mocks base method
func (m *MockAPIGatewayAPI) CreateDeploymentRequest(arg0 *apigateway.CreateDeploymentInput) (*request.Request, *apigateway.Deployment) {
	ret := m.ctrl.Call(m, "CreateDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Deployment)
	return ret0, ret1
}

// CreateDeploymentRequest indicates an expected call of CreateDeploymentRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateDeploymentRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateDeploymentRequest), arg0)
}

// CreateDocumentationPart mocks base method
func (m *MockAPIGatewayAPI) CreateDocumentationPart(arg0 *apigateway.CreateDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	ret := m.ctrl.Call(m, "CreateDocumentationPart", arg0)
	ret0, _ := ret[0].(*apigateway.DocumentationPart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDocumentationPart indicates an expected call of CreateDocumentationPart
func (mr *MockAPIGatewayAPIMockRecorder) CreateDocumentationPart(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDocumentationPart", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateDocumentationPart), arg0)
}

// CreateDocumentationPartWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateDocumentationPartWithContext(arg0 aws.Context, arg1 *apigateway.CreateDocumentationPartInput, arg2 ...request.Option) (*apigateway.DocumentationPart, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDocumentationPartWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DocumentationPart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDocumentationPartWithContext indicates an expected call of CreateDocumentationPartWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateDocumentationPartWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDocumentationPartWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateDocumentationPartWithContext), varargs...)
}

// CreateDocumentationPartRequest mocks base method
func (m *MockAPIGatewayAPI) CreateDocumentationPartRequest(arg0 *apigateway.CreateDocumentationPartInput) (*request.Request, *apigateway.DocumentationPart) {
	ret := m.ctrl.Call(m, "CreateDocumentationPartRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DocumentationPart)
	return ret0, ret1
}

// CreateDocumentationPartRequest indicates an expected call of CreateDocumentationPartRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateDocumentationPartRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDocumentationPartRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateDocumentationPartRequest), arg0)
}

// CreateDocumentationVersion mocks base method
func (m *MockAPIGatewayAPI) CreateDocumentationVersion(arg0 *apigateway.CreateDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	ret := m.ctrl.Call(m, "CreateDocumentationVersion", arg0)
	ret0, _ := ret[0].(*apigateway.DocumentationVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDocumentationVersion indicates an expected call of CreateDocumentationVersion
func (mr *MockAPIGatewayAPIMockRecorder) CreateDocumentationVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDocumentationVersion", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateDocumentationVersion), arg0)
}

// CreateDocumentationVersionWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateDocumentationVersionWithContext(arg0 aws.Context, arg1 *apigateway.CreateDocumentationVersionInput, arg2 ...request.Option) (*apigateway.DocumentationVersion, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDocumentationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DocumentationVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDocumentationVersionWithContext indicates an expected call of CreateDocumentationVersionWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateDocumentationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDocumentationVersionWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateDocumentationVersionWithContext), varargs...)
}

// CreateDocumentationVersionRequest mocks base method
func (m *MockAPIGatewayAPI) CreateDocumentationVersionRequest(arg0 *apigateway.CreateDocumentationVersionInput) (*request.Request, *apigateway.DocumentationVersion) {
	ret := m.ctrl.Call(m, "CreateDocumentationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DocumentationVersion)
	return ret0, ret1
}

// CreateDocumentationVersionRequest indicates an expected call of CreateDocumentationVersionRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateDocumentationVersionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDocumentationVersionRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateDocumentationVersionRequest), arg0)
}

// CreateDomainName mocks base method
func (m *MockAPIGatewayAPI) CreateDomainName(arg0 *apigateway.CreateDomainNameInput) (*apigateway.DomainName, error) {
	ret := m.ctrl.Call(m, "CreateDomainName", arg0)
	ret0, _ := ret[0].(*apigateway.DomainName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainName indicates an expected call of CreateDomainName
func (mr *MockAPIGatewayAPIMockRecorder) CreateDomainName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainName", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateDomainName), arg0)
}

// CreateDomainNameWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateDomainNameWithContext(arg0 aws.Context, arg1 *apigateway.CreateDomainNameInput, arg2 ...request.Option) (*apigateway.DomainName, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDomainNameWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DomainName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomainNameWithContext indicates an expected call of CreateDomainNameWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateDomainNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainNameWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateDomainNameWithContext), varargs...)
}

// CreateDomainNameRequest mocks base method
func (m *MockAPIGatewayAPI) CreateDomainNameRequest(arg0 *apigateway.CreateDomainNameInput) (*request.Request, *apigateway.DomainName) {
	ret := m.ctrl.Call(m, "CreateDomainNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DomainName)
	return ret0, ret1
}

// CreateDomainNameRequest indicates an expected call of CreateDomainNameRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateDomainNameRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomainNameRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateDomainNameRequest), arg0)
}

// CreateModel mocks base method
func (m *MockAPIGatewayAPI) CreateModel(arg0 *apigateway.CreateModelInput) (*apigateway.Model, error) {
	ret := m.ctrl.Call(m, "CreateModel", arg0)
	ret0, _ := ret[0].(*apigateway.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel
func (mr *MockAPIGatewayAPIMockRecorder) CreateModel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateModel), arg0)
}

// CreateModelWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateModelWithContext(arg0 aws.Context, arg1 *apigateway.CreateModelInput, arg2 ...request.Option) (*apigateway.Model, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelWithContext indicates an expected call of CreateModelWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateModelWithContext), varargs...)
}

// CreateModelRequest mocks base method
func (m *MockAPIGatewayAPI) CreateModelRequest(arg0 *apigateway.CreateModelInput) (*request.Request, *apigateway.Model) {
	ret := m.ctrl.Call(m, "CreateModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Model)
	return ret0, ret1
}

// CreateModelRequest indicates an expected call of CreateModelRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateModelRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateModelRequest), arg0)
}

// CreateRequestValidator mocks base method
func (m *MockAPIGatewayAPI) CreateRequestValidator(arg0 *apigateway.CreateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	ret := m.ctrl.Call(m, "CreateRequestValidator", arg0)
	ret0, _ := ret[0].(*apigateway.UpdateRequestValidatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequestValidator indicates an expected call of CreateRequestValidator
func (mr *MockAPIGatewayAPIMockRecorder) CreateRequestValidator(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequestValidator", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateRequestValidator), arg0)
}

// CreateRequestValidatorWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateRequestValidatorWithContext(arg0 aws.Context, arg1 *apigateway.CreateRequestValidatorInput, arg2 ...request.Option) (*apigateway.UpdateRequestValidatorOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRequestValidatorWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.UpdateRequestValidatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequestValidatorWithContext indicates an expected call of CreateRequestValidatorWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateRequestValidatorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequestValidatorWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateRequestValidatorWithContext), varargs...)
}

// CreateRequestValidatorRequest mocks base method
func (m *MockAPIGatewayAPI) CreateRequestValidatorRequest(arg0 *apigateway.CreateRequestValidatorInput) (*request.Request, *apigateway.UpdateRequestValidatorOutput) {
	ret := m.ctrl.Call(m, "CreateRequestValidatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.UpdateRequestValidatorOutput)
	return ret0, ret1
}

// CreateRequestValidatorRequest indicates an expected call of CreateRequestValidatorRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateRequestValidatorRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequestValidatorRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateRequestValidatorRequest), arg0)
}

// CreateResource mocks base method
func (m *MockAPIGatewayAPI) CreateResource(arg0 *apigateway.CreateResourceInput) (*apigateway.Resource, error) {
	ret := m.ctrl.Call(m, "CreateResource", arg0)
	ret0, _ := ret[0].(*apigateway.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource
func (mr *MockAPIGatewayAPIMockRecorder) CreateResource(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateResource), arg0)
}

// CreateResourceWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateResourceWithContext(arg0 aws.Context, arg1 *apigateway.CreateResourceInput, arg2 ...request.Option) (*apigateway.Resource, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResourceWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceWithContext indicates an expected call of CreateResourceWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateResourceWithContext), varargs...)
}

// CreateResourceRequest mocks base method
func (m *MockAPIGatewayAPI) CreateResourceRequest(arg0 *apigateway.CreateResourceInput) (*request.Request, *apigateway.Resource) {
	ret := m.ctrl.Call(m, "CreateResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Resource)
	return ret0, ret1
}

// CreateResourceRequest indicates an expected call of CreateResourceRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateResourceRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateResourceRequest), arg0)
}

// CreateRestApi mocks base method
func (m *MockAPIGatewayAPI) CreateRestApi(arg0 *apigateway.CreateRestApiInput) (*apigateway.RestApi, error) {
	ret := m.ctrl.Call(m, "CreateRestApi", arg0)
	ret0, _ := ret[0].(*apigateway.RestApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestApi indicates an expected call of CreateRestApi
func (mr *MockAPIGatewayAPIMockRecorder) CreateRestApi(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestApi", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateRestApi), arg0)
}

// CreateRestApiWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateRestApiWithContext(arg0 aws.Context, arg1 *apigateway.CreateRestApiInput, arg2 ...request.Option) (*apigateway.RestApi, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRestApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.RestApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestApiWithContext indicates an expected call of CreateRestApiWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateRestApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestApiWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateRestApiWithContext), varargs...)
}

// CreateRestApiRequest mocks base method
func (m *MockAPIGatewayAPI) CreateRestApiRequest(arg0 *apigateway.CreateRestApiInput) (*request.Request, *apigateway.RestApi) {
	ret := m.ctrl.Call(m, "CreateRestApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.RestApi)
	return ret0, ret1
}

// CreateRestApiRequest indicates an expected call of CreateRestApiRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateRestApiRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestApiRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateRestApiRequest), arg0)
}

// CreateStage mocks base method
func (m *MockAPIGatewayAPI) CreateStage(arg0 *apigateway.CreateStageInput) (*apigateway.Stage, error) {
	ret := m.ctrl.Call(m, "CreateStage", arg0)
	ret0, _ := ret[0].(*apigateway.Stage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStage indicates an expected call of CreateStage
func (mr *MockAPIGatewayAPIMockRecorder) CreateStage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStage", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateStage), arg0)
}

// CreateStageWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateStageWithContext(arg0 aws.Context, arg1 *apigateway.CreateStageInput, arg2 ...request.Option) (*apigateway.Stage, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStageWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Stage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStageWithContext indicates an expected call of CreateStageWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStageWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateStageWithContext), varargs...)
}

// CreateStageRequest mocks base method
func (m *MockAPIGatewayAPI) CreateStageRequest(arg0 *apigateway.CreateStageInput) (*request.Request, *apigateway.Stage) {
	ret := m.ctrl.Call(m, "CreateStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Stage)
	return ret0, ret1
}

// CreateStageRequest indicates an expected call of CreateStageRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateStageRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStageRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateStageRequest), arg0)
}

// CreateUsagePlan mocks base method
func (m *MockAPIGatewayAPI) CreateUsagePlan(arg0 *apigateway.CreateUsagePlanInput) (*apigateway.UsagePlan, error) {
	ret := m.ctrl.Call(m, "CreateUsagePlan", arg0)
	ret0, _ := ret[0].(*apigateway.UsagePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsagePlan indicates an expected call of CreateUsagePlan
func (mr *MockAPIGatewayAPIMockRecorder) CreateUsagePlan(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsagePlan", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateUsagePlan), arg0)
}

// CreateUsagePlanWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateUsagePlanWithContext(arg0 aws.Context, arg1 *apigateway.CreateUsagePlanInput, arg2 ...request.Option) (*apigateway.UsagePlan, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUsagePlanWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.UsagePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsagePlanWithContext indicates an expected call of CreateUsagePlanWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateUsagePlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsagePlanWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateUsagePlanWithContext), varargs...)
}

// CreateUsagePlanRequest mocks base method
func (m *MockAPIGatewayAPI) CreateUsagePlanRequest(arg0 *apigateway.CreateUsagePlanInput) (*request.Request, *apigateway.UsagePlan) {
	ret := m.ctrl.Call(m, "CreateUsagePlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.UsagePlan)
	return ret0, ret1
}

// CreateUsagePlanRequest indicates an expected call of CreateUsagePlanRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateUsagePlanRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsagePlanRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateUsagePlanRequest), arg0)
}

// CreateUsagePlanKey mocks base method
func (m *MockAPIGatewayAPI) CreateUsagePlanKey(arg0 *apigateway.CreateUsagePlanKeyInput) (*apigateway.UsagePlanKey, error) {
	ret := m.ctrl.Call(m, "CreateUsagePlanKey", arg0)
	ret0, _ := ret[0].(*apigateway.UsagePlanKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsagePlanKey indicates an expected call of CreateUsagePlanKey
func (mr *MockAPIGatewayAPIMockRecorder) CreateUsagePlanKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsagePlanKey", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateUsagePlanKey), arg0)
}

// CreateUsagePlanKeyWithContext mocks base method
func (m *MockAPIGatewayAPI) CreateUsagePlanKeyWithContext(arg0 aws.Context, arg1 *apigateway.CreateUsagePlanKeyInput, arg2 ...request.Option) (*apigateway.UsagePlanKey, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUsagePlanKeyWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.UsagePlanKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsagePlanKeyWithContext indicates an expected call of CreateUsagePlanKeyWithContext
func (mr *MockAPIGatewayAPIMockRecorder) CreateUsagePlanKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsagePlanKeyWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateUsagePlanKeyWithContext), varargs...)
}

// CreateUsagePlanKeyRequest mocks base method
func (m *MockAPIGatewayAPI) CreateUsagePlanKeyRequest(arg0 *apigateway.CreateUsagePlanKeyInput) (*request.Request, *apigateway.UsagePlanKey) {
	ret := m.ctrl.Call(m, "CreateUsagePlanKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.UsagePlanKey)
	return ret0, ret1
}

// CreateUsagePlanKeyRequest indicates an expected call of CreateUsagePlanKeyRequest
func (mr *MockAPIGatewayAPIMockRecorder) CreateUsagePlanKeyRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsagePlanKeyRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).CreateUsagePlanKeyRequest), arg0)
}

// DeleteApiKey mocks base method
func (m *MockAPIGatewayAPI) DeleteApiKey(arg0 *apigateway.DeleteApiKeyInput) (*apigateway.DeleteApiKeyOutput, error) {
	ret := m.ctrl.Call(m, "DeleteApiKey", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteApiKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApiKey indicates an expected call of DeleteApiKey
func (mr *MockAPIGatewayAPIMockRecorder) DeleteApiKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiKey", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteApiKey), arg0)
}

// DeleteApiKeyWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteApiKeyWithContext(arg0 aws.Context, arg1 *apigateway.DeleteApiKeyInput, arg2 ...request.Option) (*apigateway.DeleteApiKeyOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApiKeyWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteApiKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApiKeyWithContext indicates an expected call of DeleteApiKeyWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteApiKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiKeyWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteApiKeyWithContext), varargs...)
}

// DeleteApiKeyRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteApiKeyRequest(arg0 *apigateway.DeleteApiKeyInput) (*request.Request, *apigateway.DeleteApiKeyOutput) {
	ret := m.ctrl.Call(m, "DeleteApiKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteApiKeyOutput)
	return ret0, ret1
}

// DeleteApiKeyRequest indicates an expected call of DeleteApiKeyRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteApiKeyRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiKeyRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteApiKeyRequest), arg0)
}

// DeleteAuthorizer mocks base method
func (m *MockAPIGatewayAPI) DeleteAuthorizer(arg0 *apigateway.DeleteAuthorizerInput) (*apigateway.DeleteAuthorizerOutput, error) {
	ret := m.ctrl.Call(m, "DeleteAuthorizer", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthorizer indicates an expected call of DeleteAuthorizer
func (mr *MockAPIGatewayAPIMockRecorder) DeleteAuthorizer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizer", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteAuthorizer), arg0)
}

// DeleteAuthorizerWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteAuthorizerWithContext(arg0 aws.Context, arg1 *apigateway.DeleteAuthorizerInput, arg2 ...request.Option) (*apigateway.DeleteAuthorizerOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthorizerWithContext indicates an expected call of DeleteAuthorizerWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizerWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteAuthorizerWithContext), varargs...)
}

// DeleteAuthorizerRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteAuthorizerRequest(arg0 *apigateway.DeleteAuthorizerInput) (*request.Request, *apigateway.DeleteAuthorizerOutput) {
	ret := m.ctrl.Call(m, "DeleteAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteAuthorizerOutput)
	return ret0, ret1
}

// DeleteAuthorizerRequest indicates an expected call of DeleteAuthorizerRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteAuthorizerRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorizerRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteAuthorizerRequest), arg0)
}

// DeleteBasePathMapping mocks base method
func (m *MockAPIGatewayAPI) DeleteBasePathMapping(arg0 *apigateway.DeleteBasePathMappingInput) (*apigateway.DeleteBasePathMappingOutput, error) {
	ret := m.ctrl.Call(m, "DeleteBasePathMapping", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteBasePathMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBasePathMapping indicates an expected call of DeleteBasePathMapping
func (mr *MockAPIGatewayAPIMockRecorder) DeleteBasePathMapping(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBasePathMapping", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteBasePathMapping), arg0)
}

// DeleteBasePathMappingWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteBasePathMappingWithContext(arg0 aws.Context, arg1 *apigateway.DeleteBasePathMappingInput, arg2 ...request.Option) (*apigateway.DeleteBasePathMappingOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBasePathMappingWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteBasePathMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBasePathMappingWithContext indicates an expected call of DeleteBasePathMappingWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteBasePathMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBasePathMappingWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteBasePathMappingWithContext), varargs...)
}

// DeleteBasePathMappingRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteBasePathMappingRequest(arg0 *apigateway.DeleteBasePathMappingInput) (*request.Request, *apigateway.DeleteBasePathMappingOutput) {
	ret := m.ctrl.Call(m, "DeleteBasePathMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteBasePathMappingOutput)
	return ret0, ret1
}

// DeleteBasePathMappingRequest indicates an expected call of DeleteBasePathMappingRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteBasePathMappingRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBasePathMappingRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteBasePathMappingRequest), arg0)
}

// DeleteClientCertificate mocks base method
func (m *MockAPIGatewayAPI) DeleteClientCertificate(arg0 *apigateway.DeleteClientCertificateInput) (*apigateway.DeleteClientCertificateOutput, error) {
	ret := m.ctrl.Call(m, "DeleteClientCertificate", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteClientCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClientCertificate indicates an expected call of DeleteClientCertificate
func (mr *MockAPIGatewayAPIMockRecorder) DeleteClientCertificate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientCertificate", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteClientCertificate), arg0)
}

// DeleteClientCertificateWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteClientCertificateWithContext(arg0 aws.Context, arg1 *apigateway.DeleteClientCertificateInput, arg2 ...request.Option) (*apigateway.DeleteClientCertificateOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClientCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteClientCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClientCertificateWithContext indicates an expected call of DeleteClientCertificateWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteClientCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientCertificateWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteClientCertificateWithContext), varargs...)
}

// DeleteClientCertificateRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteClientCertificateRequest(arg0 *apigateway.DeleteClientCertificateInput) (*request.Request, *apigateway.DeleteClientCertificateOutput) {
	ret := m.ctrl.Call(m, "DeleteClientCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteClientCertificateOutput)
	return ret0, ret1
}

// DeleteClientCertificateRequest indicates an expected call of DeleteClientCertificateRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteClientCertificateRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientCertificateRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteClientCertificateRequest), arg0)
}

// DeleteDeployment mocks base method
func (m *MockAPIGatewayAPI) DeleteDeployment(arg0 *apigateway.DeleteDeploymentInput) (*apigateway.DeleteDeploymentOutput, error) {
	ret := m.ctrl.Call(m, "DeleteDeployment", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeployment indicates an expected call of DeleteDeployment
func (mr *MockAPIGatewayAPIMockRecorder) DeleteDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteDeployment), arg0)
}

// DeleteDeploymentWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteDeploymentWithContext(arg0 aws.Context, arg1 *apigateway.DeleteDeploymentInput, arg2 ...request.Option) (*apigateway.DeleteDeploymentOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteDeploymentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeploymentWithContext indicates an expected call of DeleteDeploymentWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteDeploymentWithContext), varargs...)
}

// DeleteDeploymentRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteDeploymentRequest(arg0 *apigateway.DeleteDeploymentInput) (*request.Request, *apigateway.DeleteDeploymentOutput) {
	ret := m.ctrl.Call(m, "DeleteDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteDeploymentOutput)
	return ret0, ret1
}

// DeleteDeploymentRequest indicates an expected call of DeleteDeploymentRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteDeploymentRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploymentRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteDeploymentRequest), arg0)
}

// DeleteDocumentationPart mocks base method
func (m *MockAPIGatewayAPI) DeleteDocumentationPart(arg0 *apigateway.DeleteDocumentationPartInput) (*apigateway.DeleteDocumentationPartOutput, error) {
	ret := m.ctrl.Call(m, "DeleteDocumentationPart", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteDocumentationPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocumentationPart indicates an expected call of DeleteDocumentationPart
func (mr *MockAPIGatewayAPIMockRecorder) DeleteDocumentationPart(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentationPart", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteDocumentationPart), arg0)
}

// DeleteDocumentationPartWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteDocumentationPartWithContext(arg0 aws.Context, arg1 *apigateway.DeleteDocumentationPartInput, arg2 ...request.Option) (*apigateway.DeleteDocumentationPartOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDocumentationPartWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteDocumentationPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocumentationPartWithContext indicates an expected call of DeleteDocumentationPartWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteDocumentationPartWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentationPartWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteDocumentationPartWithContext), varargs...)
}

// DeleteDocumentationPartRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteDocumentationPartRequest(arg0 *apigateway.DeleteDocumentationPartInput) (*request.Request, *apigateway.DeleteDocumentationPartOutput) {
	ret := m.ctrl.Call(m, "DeleteDocumentationPartRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteDocumentationPartOutput)
	return ret0, ret1
}

// DeleteDocumentationPartRequest indicates an expected call of DeleteDocumentationPartRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteDocumentationPartRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentationPartRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteDocumentationPartRequest), arg0)
}

// DeleteDocumentationVersion mocks base method
func (m *MockAPIGatewayAPI) DeleteDocumentationVersion(arg0 *apigateway.DeleteDocumentationVersionInput) (*apigateway.DeleteDocumentationVersionOutput, error) {
	ret := m.ctrl.Call(m, "DeleteDocumentationVersion", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteDocumentationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocumentationVersion indicates an expected call of DeleteDocumentationVersion
func (mr *MockAPIGatewayAPIMockRecorder) DeleteDocumentationVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentationVersion", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteDocumentationVersion), arg0)
}

// DeleteDocumentationVersionWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteDocumentationVersionWithContext(arg0 aws.Context, arg1 *apigateway.DeleteDocumentationVersionInput, arg2 ...request.Option) (*apigateway.DeleteDocumentationVersionOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDocumentationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteDocumentationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocumentationVersionWithContext indicates an expected call of DeleteDocumentationVersionWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteDocumentationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentationVersionWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteDocumentationVersionWithContext), varargs...)
}

// DeleteDocumentationVersionRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteDocumentationVersionRequest(arg0 *apigateway.DeleteDocumentationVersionInput) (*request.Request, *apigateway.DeleteDocumentationVersionOutput) {
	ret := m.ctrl.Call(m, "DeleteDocumentationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteDocumentationVersionOutput)
	return ret0, ret1
}

// DeleteDocumentationVersionRequest indicates an expected call of DeleteDocumentationVersionRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteDocumentationVersionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentationVersionRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteDocumentationVersionRequest), arg0)
}

// DeleteDomainName mocks base method
func (m *MockAPIGatewayAPI) DeleteDomainName(arg0 *apigateway.DeleteDomainNameInput) (*apigateway.DeleteDomainNameOutput, error) {
	ret := m.ctrl.Call(m, "DeleteDomainName", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteDomainNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainName indicates an expected call of DeleteDomainName
func (mr *MockAPIGatewayAPIMockRecorder) DeleteDomainName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainName", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteDomainName), arg0)
}

// DeleteDomainNameWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteDomainNameWithContext(arg0 aws.Context, arg1 *apigateway.DeleteDomainNameInput, arg2 ...request.Option) (*apigateway.DeleteDomainNameOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDomainNameWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteDomainNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDomainNameWithContext indicates an expected call of DeleteDomainNameWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteDomainNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainNameWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteDomainNameWithContext), varargs...)
}

// DeleteDomainNameRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteDomainNameRequest(arg0 *apigateway.DeleteDomainNameInput) (*request.Request, *apigateway.DeleteDomainNameOutput) {
	ret := m.ctrl.Call(m, "DeleteDomainNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteDomainNameOutput)
	return ret0, ret1
}

// DeleteDomainNameRequest indicates an expected call of DeleteDomainNameRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteDomainNameRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomainNameRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteDomainNameRequest), arg0)
}

// DeleteGatewayResponse mocks base method
func (m *MockAPIGatewayAPI) DeleteGatewayResponse(arg0 *apigateway.DeleteGatewayResponseInput) (*apigateway.DeleteGatewayResponseOutput, error) {
	ret := m.ctrl.Call(m, "DeleteGatewayResponse", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteGatewayResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGatewayResponse indicates an expected call of DeleteGatewayResponse
func (mr *MockAPIGatewayAPIMockRecorder) DeleteGatewayResponse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayResponse", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteGatewayResponse), arg0)
}

// DeleteGatewayResponseWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteGatewayResponseWithContext(arg0 aws.Context, arg1 *apigateway.DeleteGatewayResponseInput, arg2 ...request.Option) (*apigateway.DeleteGatewayResponseOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGatewayResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteGatewayResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGatewayResponseWithContext indicates an expected call of DeleteGatewayResponseWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteGatewayResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayResponseWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteGatewayResponseWithContext), varargs...)
}

// DeleteGatewayResponseRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteGatewayResponseRequest(arg0 *apigateway.DeleteGatewayResponseInput) (*request.Request, *apigateway.DeleteGatewayResponseOutput) {
	ret := m.ctrl.Call(m, "DeleteGatewayResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteGatewayResponseOutput)
	return ret0, ret1
}

// DeleteGatewayResponseRequest indicates an expected call of DeleteGatewayResponseRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteGatewayResponseRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGatewayResponseRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteGatewayResponseRequest), arg0)
}

// DeleteIntegration mocks base method
func (m *MockAPIGatewayAPI) DeleteIntegration(arg0 *apigateway.DeleteIntegrationInput) (*apigateway.DeleteIntegrationOutput, error) {
	ret := m.ctrl.Call(m, "DeleteIntegration", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntegration indicates an expected call of DeleteIntegration
func (mr *MockAPIGatewayAPIMockRecorder) DeleteIntegration(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegration", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteIntegration), arg0)
}

// DeleteIntegrationWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteIntegrationWithContext(arg0 aws.Context, arg1 *apigateway.DeleteIntegrationInput, arg2 ...request.Option) (*apigateway.DeleteIntegrationOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIntegrationWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteIntegrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntegrationWithContext indicates an expected call of DeleteIntegrationWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteIntegrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteIntegrationWithContext), varargs...)
}

// DeleteIntegrationRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteIntegrationRequest(arg0 *apigateway.DeleteIntegrationInput) (*request.Request, *apigateway.DeleteIntegrationOutput) {
	ret := m.ctrl.Call(m, "DeleteIntegrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteIntegrationOutput)
	return ret0, ret1
}

// DeleteIntegrationRequest indicates an expected call of DeleteIntegrationRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteIntegrationRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteIntegrationRequest), arg0)
}

// DeleteIntegrationResponse mocks base method
func (m *MockAPIGatewayAPI) DeleteIntegrationResponse(arg0 *apigateway.DeleteIntegrationResponseInput) (*apigateway.DeleteIntegrationResponseOutput, error) {
	ret := m.ctrl.Call(m, "DeleteIntegrationResponse", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteIntegrationResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntegrationResponse indicates an expected call of DeleteIntegrationResponse
func (mr *MockAPIGatewayAPIMockRecorder) DeleteIntegrationResponse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationResponse", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteIntegrationResponse), arg0)
}

// DeleteIntegrationResponseWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteIntegrationResponseWithContext(arg0 aws.Context, arg1 *apigateway.DeleteIntegrationResponseInput, arg2 ...request.Option) (*apigateway.DeleteIntegrationResponseOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIntegrationResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteIntegrationResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIntegrationResponseWithContext indicates an expected call of DeleteIntegrationResponseWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteIntegrationResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationResponseWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteIntegrationResponseWithContext), varargs...)
}

// DeleteIntegrationResponseRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteIntegrationResponseRequest(arg0 *apigateway.DeleteIntegrationResponseInput) (*request.Request, *apigateway.DeleteIntegrationResponseOutput) {
	ret := m.ctrl.Call(m, "DeleteIntegrationResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteIntegrationResponseOutput)
	return ret0, ret1
}

// DeleteIntegrationResponseRequest indicates an expected call of DeleteIntegrationResponseRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteIntegrationResponseRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrationResponseRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteIntegrationResponseRequest), arg0)
}

// DeleteMethod mocks base method
func (m *MockAPIGatewayAPI) DeleteMethod(arg0 *apigateway.DeleteMethodInput) (*apigateway.DeleteMethodOutput, error) {
	ret := m.ctrl.Call(m, "DeleteMethod", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteMethodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMethod indicates an expected call of DeleteMethod
func (mr *MockAPIGatewayAPIMockRecorder) DeleteMethod(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMethod", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteMethod), arg0)
}

// DeleteMethodWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteMethodWithContext(arg0 aws.Context, arg1 *apigateway.DeleteMethodInput, arg2 ...request.Option) (*apigateway.DeleteMethodOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMethodWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteMethodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMethodWithContext indicates an expected call of DeleteMethodWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteMethodWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMethodWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteMethodWithContext), varargs...)
}

// DeleteMethodRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteMethodRequest(arg0 *apigateway.DeleteMethodInput) (*request.Request, *apigateway.DeleteMethodOutput) {
	ret := m.ctrl.Call(m, "DeleteMethodRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteMethodOutput)
	return ret0, ret1
}

// DeleteMethodRequest indicates an expected call of DeleteMethodRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteMethodRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMethodRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteMethodRequest), arg0)
}

// DeleteMethodResponse mocks base method
func (m *MockAPIGatewayAPI) DeleteMethodResponse(arg0 *apigateway.DeleteMethodResponseInput) (*apigateway.DeleteMethodResponseOutput, error) {
	ret := m.ctrl.Call(m, "DeleteMethodResponse", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteMethodResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMethodResponse indicates an expected call of DeleteMethodResponse
func (mr *MockAPIGatewayAPIMockRecorder) DeleteMethodResponse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMethodResponse", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteMethodResponse), arg0)
}

// DeleteMethodResponseWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteMethodResponseWithContext(arg0 aws.Context, arg1 *apigateway.DeleteMethodResponseInput, arg2 ...request.Option) (*apigateway.DeleteMethodResponseOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMethodResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteMethodResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMethodResponseWithContext indicates an expected call of DeleteMethodResponseWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteMethodResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMethodResponseWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteMethodResponseWithContext), varargs...)
}

// DeleteMethodResponseRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteMethodResponseRequest(arg0 *apigateway.DeleteMethodResponseInput) (*request.Request, *apigateway.DeleteMethodResponseOutput) {
	ret := m.ctrl.Call(m, "DeleteMethodResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteMethodResponseOutput)
	return ret0, ret1
}

// DeleteMethodResponseRequest indicates an expected call of DeleteMethodResponseRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteMethodResponseRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMethodResponseRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteMethodResponseRequest), arg0)
}

// DeleteModel mocks base method
func (m *MockAPIGatewayAPI) DeleteModel(arg0 *apigateway.DeleteModelInput) (*apigateway.DeleteModelOutput, error) {
	ret := m.ctrl.Call(m, "DeleteModel", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModel indicates an expected call of DeleteModel
func (mr *MockAPIGatewayAPIMockRecorder) DeleteModel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteModel), arg0)
}

// DeleteModelWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteModelWithContext(arg0 aws.Context, arg1 *apigateway.DeleteModelInput, arg2 ...request.Option) (*apigateway.DeleteModelOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModelWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteModelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelWithContext indicates an expected call of DeleteModelWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteModelWithContext), varargs...)
}

// DeleteModelRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteModelRequest(arg0 *apigateway.DeleteModelInput) (*request.Request, *apigateway.DeleteModelOutput) {
	ret := m.ctrl.Call(m, "DeleteModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteModelOutput)
	return ret0, ret1
}

// DeleteModelRequest indicates an expected call of DeleteModelRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteModelRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteModelRequest), arg0)
}

// DeleteRequestValidator mocks base method
func (m *MockAPIGatewayAPI) DeleteRequestValidator(arg0 *apigateway.DeleteRequestValidatorInput) (*apigateway.DeleteRequestValidatorOutput, error) {
	ret := m.ctrl.Call(m, "DeleteRequestValidator", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteRequestValidatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRequestValidator indicates an expected call of DeleteRequestValidator
func (mr *MockAPIGatewayAPIMockRecorder) DeleteRequestValidator(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequestValidator", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteRequestValidator), arg0)
}

// DeleteRequestValidatorWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteRequestValidatorWithContext(arg0 aws.Context, arg1 *apigateway.DeleteRequestValidatorInput, arg2 ...request.Option) (*apigateway.DeleteRequestValidatorOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRequestValidatorWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteRequestValidatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRequestValidatorWithContext indicates an expected call of DeleteRequestValidatorWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteRequestValidatorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequestValidatorWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteRequestValidatorWithContext), varargs...)
}

// DeleteRequestValidatorRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteRequestValidatorRequest(arg0 *apigateway.DeleteRequestValidatorInput) (*request.Request, *apigateway.DeleteRequestValidatorOutput) {
	ret := m.ctrl.Call(m, "DeleteRequestValidatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteRequestValidatorOutput)
	return ret0, ret1
}

// DeleteRequestValidatorRequest indicates an expected call of DeleteRequestValidatorRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteRequestValidatorRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequestValidatorRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteRequestValidatorRequest), arg0)
}

// DeleteResource mocks base method
func (m *MockAPIGatewayAPI) DeleteResource(arg0 *apigateway.DeleteResourceInput) (*apigateway.DeleteResourceOutput, error) {
	ret := m.ctrl.Call(m, "DeleteResource", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource
func (mr *MockAPIGatewayAPIMockRecorder) DeleteResource(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteResource), arg0)
}

// DeleteResourceWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteResourceWithContext(arg0 aws.Context, arg1 *apigateway.DeleteResourceInput, arg2 ...request.Option) (*apigateway.DeleteResourceOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourceWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceWithContext indicates an expected call of DeleteResourceWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteResourceWithContext), varargs...)
}

// DeleteResourceRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteResourceRequest(arg0 *apigateway.DeleteResourceInput) (*request.Request, *apigateway.DeleteResourceOutput) {
	ret := m.ctrl.Call(m, "DeleteResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteResourceOutput)
	return ret0, ret1
}

// DeleteResourceRequest indicates an expected call of DeleteResourceRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteResourceRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteResourceRequest), arg0)
}

// DeleteRestApi mocks base method
func (m *MockAPIGatewayAPI) DeleteRestApi(arg0 *apigateway.DeleteRestApiInput) (*apigateway.DeleteRestApiOutput, error) {
	ret := m.ctrl.Call(m, "DeleteRestApi", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteRestApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRestApi indicates an expected call of DeleteRestApi
func (mr *MockAPIGatewayAPIMockRecorder) DeleteRestApi(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRestApi", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteRestApi), arg0)
}

// DeleteRestApiWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteRestApiWithContext(arg0 aws.Context, arg1 *apigateway.DeleteRestApiInput, arg2 ...request.Option) (*apigateway.DeleteRestApiOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRestApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteRestApiOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRestApiWithContext indicates an expected call of DeleteRestApiWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteRestApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRestApiWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteRestApiWithContext), varargs...)
}

// DeleteRestApiRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteRestApiRequest(arg0 *apigateway.DeleteRestApiInput) (*request.Request, *apigateway.DeleteRestApiOutput) {
	ret := m.ctrl.Call(m, "DeleteRestApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteRestApiOutput)
	return ret0, ret1
}

// DeleteRestApiRequest indicates an expected call of DeleteRestApiRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteRestApiRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRestApiRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteRestApiRequest), arg0)
}

// DeleteStage mocks base method
func (m *MockAPIGatewayAPI) DeleteStage(arg0 *apigateway.DeleteStageInput) (*apigateway.DeleteStageOutput, error) {
	ret := m.ctrl.Call(m, "DeleteStage", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStage indicates an expected call of DeleteStage
func (mr *MockAPIGatewayAPIMockRecorder) DeleteStage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStage", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteStage), arg0)
}

// DeleteStageWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteStageWithContext(arg0 aws.Context, arg1 *apigateway.DeleteStageInput, arg2 ...request.Option) (*apigateway.DeleteStageOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStageWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteStageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStageWithContext indicates an expected call of DeleteStageWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStageWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteStageWithContext), varargs...)
}

// DeleteStageRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteStageRequest(arg0 *apigateway.DeleteStageInput) (*request.Request, *apigateway.DeleteStageOutput) {
	ret := m.ctrl.Call(m, "DeleteStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteStageOutput)
	return ret0, ret1
}

// DeleteStageRequest indicates an expected call of DeleteStageRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteStageRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStageRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteStageRequest), arg0)
}

// DeleteUsagePlan mocks base method
func (m *MockAPIGatewayAPI) DeleteUsagePlan(arg0 *apigateway.DeleteUsagePlanInput) (*apigateway.DeleteUsagePlanOutput, error) {
	ret := m.ctrl.Call(m, "DeleteUsagePlan", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteUsagePlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUsagePlan indicates an expected call of DeleteUsagePlan
func (mr *MockAPIGatewayAPIMockRecorder) DeleteUsagePlan(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsagePlan", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteUsagePlan), arg0)
}

// DeleteUsagePlanWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteUsagePlanWithContext(arg0 aws.Context, arg1 *apigateway.DeleteUsagePlanInput, arg2 ...request.Option) (*apigateway.DeleteUsagePlanOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUsagePlanWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteUsagePlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUsagePlanWithContext indicates an expected call of DeleteUsagePlanWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteUsagePlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsagePlanWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteUsagePlanWithContext), varargs...)
}

// DeleteUsagePlanRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteUsagePlanRequest(arg0 *apigateway.DeleteUsagePlanInput) (*request.Request, *apigateway.DeleteUsagePlanOutput) {
	ret := m.ctrl.Call(m, "DeleteUsagePlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteUsagePlanOutput)
	return ret0, ret1
}

// DeleteUsagePlanRequest indicates an expected call of DeleteUsagePlanRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteUsagePlanRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsagePlanRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteUsagePlanRequest), arg0)
}

// DeleteUsagePlanKey mocks base method
func (m *MockAPIGatewayAPI) DeleteUsagePlanKey(arg0 *apigateway.DeleteUsagePlanKeyInput) (*apigateway.DeleteUsagePlanKeyOutput, error) {
	ret := m.ctrl.Call(m, "DeleteUsagePlanKey", arg0)
	ret0, _ := ret[0].(*apigateway.DeleteUsagePlanKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUsagePlanKey indicates an expected call of DeleteUsagePlanKey
func (mr *MockAPIGatewayAPIMockRecorder) DeleteUsagePlanKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsagePlanKey", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteUsagePlanKey), arg0)
}

// DeleteUsagePlanKeyWithContext mocks base method
func (m *MockAPIGatewayAPI) DeleteUsagePlanKeyWithContext(arg0 aws.Context, arg1 *apigateway.DeleteUsagePlanKeyInput, arg2 ...request.Option) (*apigateway.DeleteUsagePlanKeyOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUsagePlanKeyWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DeleteUsagePlanKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUsagePlanKeyWithContext indicates an expected call of DeleteUsagePlanKeyWithContext
func (mr *MockAPIGatewayAPIMockRecorder) DeleteUsagePlanKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsagePlanKeyWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteUsagePlanKeyWithContext), varargs...)
}

// DeleteUsagePlanKeyRequest mocks base method
func (m *MockAPIGatewayAPI) DeleteUsagePlanKeyRequest(arg0 *apigateway.DeleteUsagePlanKeyInput) (*request.Request, *apigateway.DeleteUsagePlanKeyOutput) {
	ret := m.ctrl.Call(m, "DeleteUsagePlanKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DeleteUsagePlanKeyOutput)
	return ret0, ret1
}

// DeleteUsagePlanKeyRequest indicates an expected call of DeleteUsagePlanKeyRequest
func (mr *MockAPIGatewayAPIMockRecorder) DeleteUsagePlanKeyRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsagePlanKeyRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).DeleteUsagePlanKeyRequest), arg0)
}

// FlushStageAuthorizersCache mocks base method
func (m *MockAPIGatewayAPI) FlushStageAuthorizersCache(arg0 *apigateway.FlushStageAuthorizersCacheInput) (*apigateway.FlushStageAuthorizersCacheOutput, error) {
	ret := m.ctrl.Call(m, "FlushStageAuthorizersCache", arg0)
	ret0, _ := ret[0].(*apigateway.FlushStageAuthorizersCacheOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushStageAuthorizersCache indicates an expected call of FlushStageAuthorizersCache
func (mr *MockAPIGatewayAPIMockRecorder) FlushStageAuthorizersCache(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushStageAuthorizersCache", reflect.TypeOf((*MockAPIGatewayAPI)(nil).FlushStageAuthorizersCache), arg0)
}

// FlushStageAuthorizersCacheWithContext mocks base method
func (m *MockAPIGatewayAPI) FlushStageAuthorizersCacheWithContext(arg0 aws.Context, arg1 *apigateway.FlushStageAuthorizersCacheInput, arg2 ...request.Option) (*apigateway.FlushStageAuthorizersCacheOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FlushStageAuthorizersCacheWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.FlushStageAuthorizersCacheOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushStageAuthorizersCacheWithContext indicates an expected call of FlushStageAuthorizersCacheWithContext
func (mr *MockAPIGatewayAPIMockRecorder) FlushStageAuthorizersCacheWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushStageAuthorizersCacheWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).FlushStageAuthorizersCacheWithContext), varargs...)
}

// FlushStageAuthorizersCacheRequest mocks base method
func (m *MockAPIGatewayAPI) FlushStageAuthorizersCacheRequest(arg0 *apigateway.FlushStageAuthorizersCacheInput) (*request.Request, *apigateway.FlushStageAuthorizersCacheOutput) {
	ret := m.ctrl.Call(m, "FlushStageAuthorizersCacheRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.FlushStageAuthorizersCacheOutput)
	return ret0, ret1
}

// FlushStageAuthorizersCacheRequest indicates an expected call of FlushStageAuthorizersCacheRequest
func (mr *MockAPIGatewayAPIMockRecorder) FlushStageAuthorizersCacheRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushStageAuthorizersCacheRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).FlushStageAuthorizersCacheRequest), arg0)
}

// FlushStageCache mocks base method
func (m *MockAPIGatewayAPI) FlushStageCache(arg0 *apigateway.FlushStageCacheInput) (*apigateway.FlushStageCacheOutput, error) {
	ret := m.ctrl.Call(m, "FlushStageCache", arg0)
	ret0, _ := ret[0].(*apigateway.FlushStageCacheOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushStageCache indicates an expected call of FlushStageCache
func (mr *MockAPIGatewayAPIMockRecorder) FlushStageCache(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushStageCache", reflect.TypeOf((*MockAPIGatewayAPI)(nil).FlushStageCache), arg0)
}

// FlushStageCacheWithContext mocks base method
func (m *MockAPIGatewayAPI) FlushStageCacheWithContext(arg0 aws.Context, arg1 *apigateway.FlushStageCacheInput, arg2 ...request.Option) (*apigateway.FlushStageCacheOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FlushStageCacheWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.FlushStageCacheOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushStageCacheWithContext indicates an expected call of FlushStageCacheWithContext
func (mr *MockAPIGatewayAPIMockRecorder) FlushStageCacheWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushStageCacheWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).FlushStageCacheWithContext), varargs...)
}

// FlushStageCacheRequest mocks base method
func (m *MockAPIGatewayAPI) FlushStageCacheRequest(arg0 *apigateway.FlushStageCacheInput) (*request.Request, *apigateway.FlushStageCacheOutput) {
	ret := m.ctrl.Call(m, "FlushStageCacheRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.FlushStageCacheOutput)
	return ret0, ret1
}

// FlushStageCacheRequest indicates an expected call of FlushStageCacheRequest
func (mr *MockAPIGatewayAPIMockRecorder) FlushStageCacheRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushStageCacheRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).FlushStageCacheRequest), arg0)
}

// GenerateClientCertificate mocks base method
func (m *MockAPIGatewayAPI) GenerateClientCertificate(arg0 *apigateway.GenerateClientCertificateInput) (*apigateway.ClientCertificate, error) {
	ret := m.ctrl.Call(m, "GenerateClientCertificate", arg0)
	ret0, _ := ret[0].(*apigateway.ClientCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateClientCertificate indicates an expected call of GenerateClientCertificate
func (mr *MockAPIGatewayAPIMockRecorder) GenerateClientCertificate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateClientCertificate", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GenerateClientCertificate), arg0)
}

// GenerateClientCertificateWithContext mocks base method
func (m *MockAPIGatewayAPI) GenerateClientCertificateWithContext(arg0 aws.Context, arg1 *apigateway.GenerateClientCertificateInput, arg2 ...request.Option) (*apigateway.ClientCertificate, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateClientCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.ClientCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateClientCertificateWithContext indicates an expected call of GenerateClientCertificateWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GenerateClientCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateClientCertificateWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GenerateClientCertificateWithContext), varargs...)
}

// GenerateClientCertificateRequest mocks base method
func (m *MockAPIGatewayAPI) GenerateClientCertificateRequest(arg0 *apigateway.GenerateClientCertificateInput) (*request.Request, *apigateway.ClientCertificate) {
	ret := m.ctrl.Call(m, "GenerateClientCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.ClientCertificate)
	return ret0, ret1
}

// GenerateClientCertificateRequest indicates an expected call of GenerateClientCertificateRequest
func (mr *MockAPIGatewayAPIMockRecorder) GenerateClientCertificateRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateClientCertificateRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GenerateClientCertificateRequest), arg0)
}

// GetAccount mocks base method
func (m *MockAPIGatewayAPI) GetAccount(arg0 *apigateway.GetAccountInput) (*apigateway.Account, error) {
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(*apigateway.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockAPIGatewayAPIMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetAccount), arg0)
}

// GetAccountWithContext mocks base method
func (m *MockAPIGatewayAPI) GetAccountWithContext(arg0 aws.Context, arg1 *apigateway.GetAccountInput, arg2 ...request.Option) (*apigateway.Account, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountWithContext indicates an expected call of GetAccountWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetAccountWithContext), varargs...)
}

// GetAccountRequest mocks base method
func (m *MockAPIGatewayAPI) GetAccountRequest(arg0 *apigateway.GetAccountInput) (*request.Request, *apigateway.Account) {
	ret := m.ctrl.Call(m, "GetAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Account)
	return ret0, ret1
}

// GetAccountRequest indicates an expected call of GetAccountRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetAccountRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetAccountRequest), arg0)
}

// GetApiKey mocks base method
func (m *MockAPIGatewayAPI) GetApiKey(arg0 *apigateway.GetApiKeyInput) (*apigateway.ApiKey, error) {
	ret := m.ctrl.Call(m, "GetApiKey", arg0)
	ret0, _ := ret[0].(*apigateway.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKey indicates an expected call of GetApiKey
func (mr *MockAPIGatewayAPIMockRecorder) GetApiKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKey", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetApiKey), arg0)
}

// GetApiKeyWithContext mocks base method
func (m *MockAPIGatewayAPI) GetApiKeyWithContext(arg0 aws.Context, arg1 *apigateway.GetApiKeyInput, arg2 ...request.Option) (*apigateway.ApiKey, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiKeyWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKeyWithContext indicates an expected call of GetApiKeyWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetApiKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeyWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetApiKeyWithContext), varargs...)
}

// GetApiKeyRequest mocks base method
func (m *MockAPIGatewayAPI) GetApiKeyRequest(arg0 *apigateway.GetApiKeyInput) (*request.Request, *apigateway.ApiKey) {
	ret := m.ctrl.Call(m, "GetApiKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.ApiKey)
	return ret0, ret1
}

// GetApiKeyRequest indicates an expected call of GetApiKeyRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetApiKeyRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeyRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetApiKeyRequest), arg0)
}

// GetApiKeys mocks base method
func (m *MockAPIGatewayAPI) GetApiKeys(arg0 *apigateway.GetApiKeysInput) (*apigateway.GetApiKeysOutput, error) {
	ret := m.ctrl.Call(m, "GetApiKeys", arg0)
	ret0, _ := ret[0].(*apigateway.GetApiKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKeys indicates an expected call of GetApiKeys
func (mr *MockAPIGatewayAPIMockRecorder) GetApiKeys(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeys", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetApiKeys), arg0)
}

// GetApiKeysWithContext mocks base method
func (m *MockAPIGatewayAPI) GetApiKeysWithContext(arg0 aws.Context, arg1 *apigateway.GetApiKeysInput, arg2 ...request.Option) (*apigateway.GetApiKeysOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiKeysWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetApiKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKeysWithContext indicates an expected call of GetApiKeysWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetApiKeysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeysWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetApiKeysWithContext), varargs...)
}

// GetApiKeysRequest mocks base method
func (m *MockAPIGatewayAPI) GetApiKeysRequest(arg0 *apigateway.GetApiKeysInput) (*request.Request, *apigateway.GetApiKeysOutput) {
	ret := m.ctrl.Call(m, "GetApiKeysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetApiKeysOutput)
	return ret0, ret1
}

// GetApiKeysRequest indicates an expected call of GetApiKeysRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetApiKeysRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeysRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetApiKeysRequest), arg0)
}

// GetApiKeysPages mocks base method
func (m *MockAPIGatewayAPI) GetApiKeysPages(arg0 *apigateway.GetApiKeysInput, arg1 func(*apigateway.GetApiKeysOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "GetApiKeysPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetApiKeysPages indicates an expected call of GetApiKeysPages
func (mr *MockAPIGatewayAPIMockRecorder) GetApiKeysPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeysPages", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetApiKeysPages), arg0, arg1)
}

// GetApiKeysPagesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetApiKeysPagesWithContext(arg0 aws.Context, arg1 *apigateway.GetApiKeysInput, arg2 func(*apigateway.GetApiKeysOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiKeysPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetApiKeysPagesWithContext indicates an expected call of GetApiKeysPagesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetApiKeysPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeysPagesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetApiKeysPagesWithContext), varargs...)
}

// GetAuthorizer mocks base method
func (m *MockAPIGatewayAPI) GetAuthorizer(arg0 *apigateway.GetAuthorizerInput) (*apigateway.Authorizer, error) {
	ret := m.ctrl.Call(m, "GetAuthorizer", arg0)
	ret0, _ := ret[0].(*apigateway.Authorizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizer indicates an expected call of GetAuthorizer
func (mr *MockAPIGatewayAPIMockRecorder) GetAuthorizer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizer", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetAuthorizer), arg0)
}

// GetAuthorizerWithContext mocks base method
func (m *MockAPIGatewayAPI) GetAuthorizerWithContext(arg0 aws.Context, arg1 *apigateway.GetAuthorizerInput, arg2 ...request.Option) (*apigateway.Authorizer, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Authorizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizerWithContext indicates an expected call of GetAuthorizerWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizerWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetAuthorizerWithContext), varargs...)
}

// GetAuthorizerRequest mocks base method
func (m *MockAPIGatewayAPI) GetAuthorizerRequest(arg0 *apigateway.GetAuthorizerInput) (*request.Request, *apigateway.Authorizer) {
	ret := m.ctrl.Call(m, "GetAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Authorizer)
	return ret0, ret1
}

// GetAuthorizerRequest indicates an expected call of GetAuthorizerRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetAuthorizerRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizerRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetAuthorizerRequest), arg0)
}

// GetAuthorizers mocks base method
func (m *MockAPIGatewayAPI) GetAuthorizers(arg0 *apigateway.GetAuthorizersInput) (*apigateway.GetAuthorizersOutput, error) {
	ret := m.ctrl.Call(m, "GetAuthorizers", arg0)
	ret0, _ := ret[0].(*apigateway.GetAuthorizersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizers indicates an expected call of GetAuthorizers
func (mr *MockAPIGatewayAPIMockRecorder) GetAuthorizers(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizers", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetAuthorizers), arg0)
}

// GetAuthorizersWithContext mocks base method
func (m *MockAPIGatewayAPI) GetAuthorizersWithContext(arg0 aws.Context, arg1 *apigateway.GetAuthorizersInput, arg2 ...request.Option) (*apigateway.GetAuthorizersOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizersWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetAuthorizersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizersWithContext indicates an expected call of GetAuthorizersWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetAuthorizersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizersWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetAuthorizersWithContext), varargs...)
}

// GetAuthorizersRequest mocks base method
func (m *MockAPIGatewayAPI) GetAuthorizersRequest(arg0 *apigateway.GetAuthorizersInput) (*request.Request, *apigateway.GetAuthorizersOutput) {
	ret := m.ctrl.Call(m, "GetAuthorizersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetAuthorizersOutput)
	return ret0, ret1
}

// GetAuthorizersRequest indicates an expected call of GetAuthorizersRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetAuthorizersRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizersRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetAuthorizersRequest), arg0)
}

// GetBasePathMapping mocks base method
func (m *MockAPIGatewayAPI) GetBasePathMapping(arg0 *apigateway.GetBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	ret := m.ctrl.Call(m, "GetBasePathMapping", arg0)
	ret0, _ := ret[0].(*apigateway.BasePathMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasePathMapping indicates an expected call of GetBasePathMapping
func (mr *MockAPIGatewayAPIMockRecorder) GetBasePathMapping(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePathMapping", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetBasePathMapping), arg0)
}

// GetBasePathMappingWithContext mocks base method
func (m *MockAPIGatewayAPI) GetBasePathMappingWithContext(arg0 aws.Context, arg1 *apigateway.GetBasePathMappingInput, arg2 ...request.Option) (*apigateway.BasePathMapping, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBasePathMappingWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.BasePathMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasePathMappingWithContext indicates an expected call of GetBasePathMappingWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetBasePathMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePathMappingWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetBasePathMappingWithContext), varargs...)
}

// GetBasePathMappingRequest mocks base method
func (m *MockAPIGatewayAPI) GetBasePathMappingRequest(arg0 *apigateway.GetBasePathMappingInput) (*request.Request, *apigateway.BasePathMapping) {
	ret := m.ctrl.Call(m, "GetBasePathMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.BasePathMapping)
	return ret0, ret1
}

// GetBasePathMappingRequest indicates an expected call of GetBasePathMappingRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetBasePathMappingRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePathMappingRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetBasePathMappingRequest), arg0)
}

// GetBasePathMappings mocks base method
func (m *MockAPIGatewayAPI) GetBasePathMappings(arg0 *apigateway.GetBasePathMappingsInput) (*apigateway.GetBasePathMappingsOutput, error) {
	ret := m.ctrl.Call(m, "GetBasePathMappings", arg0)
	ret0, _ := ret[0].(*apigateway.GetBasePathMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasePathMappings indicates an expected call of GetBasePathMappings
func (mr *MockAPIGatewayAPIMockRecorder) GetBasePathMappings(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePathMappings", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetBasePathMappings), arg0)
}

// GetBasePathMappingsWithContext mocks base method
func (m *MockAPIGatewayAPI) GetBasePathMappingsWithContext(arg0 aws.Context, arg1 *apigateway.GetBasePathMappingsInput, arg2 ...request.Option) (*apigateway.GetBasePathMappingsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBasePathMappingsWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetBasePathMappingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasePathMappingsWithContext indicates an expected call of GetBasePathMappingsWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetBasePathMappingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePathMappingsWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetBasePathMappingsWithContext), varargs...)
}

// GetBasePathMappingsRequest mocks base method
func (m *MockAPIGatewayAPI) GetBasePathMappingsRequest(arg0 *apigateway.GetBasePathMappingsInput) (*request.Request, *apigateway.GetBasePathMappingsOutput) {
	ret := m.ctrl.Call(m, "GetBasePathMappingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetBasePathMappingsOutput)
	return ret0, ret1
}

// GetBasePathMappingsRequest indicates an expected call of GetBasePathMappingsRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetBasePathMappingsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePathMappingsRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetBasePathMappingsRequest), arg0)
}

// GetBasePathMappingsPages mocks base method
func (m *MockAPIGatewayAPI) GetBasePathMappingsPages(arg0 *apigateway.GetBasePathMappingsInput, arg1 func(*apigateway.GetBasePathMappingsOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "GetBasePathMappingsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBasePathMappingsPages indicates an expected call of GetBasePathMappingsPages
func (mr *MockAPIGatewayAPIMockRecorder) GetBasePathMappingsPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePathMappingsPages", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetBasePathMappingsPages), arg0, arg1)
}

// GetBasePathMappingsPagesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetBasePathMappingsPagesWithContext(arg0 aws.Context, arg1 *apigateway.GetBasePathMappingsInput, arg2 func(*apigateway.GetBasePathMappingsOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBasePathMappingsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBasePathMappingsPagesWithContext indicates an expected call of GetBasePathMappingsPagesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetBasePathMappingsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePathMappingsPagesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetBasePathMappingsPagesWithContext), varargs...)
}

// GetClientCertificate mocks base method
func (m *MockAPIGatewayAPI) GetClientCertificate(arg0 *apigateway.GetClientCertificateInput) (*apigateway.ClientCertificate, error) {
	ret := m.ctrl.Call(m, "GetClientCertificate", arg0)
	ret0, _ := ret[0].(*apigateway.ClientCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientCertificate indicates an expected call of GetClientCertificate
func (mr *MockAPIGatewayAPIMockRecorder) GetClientCertificate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCertificate", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetClientCertificate), arg0)
}

// GetClientCertificateWithContext mocks base method
func (m *MockAPIGatewayAPI) GetClientCertificateWithContext(arg0 aws.Context, arg1 *apigateway.GetClientCertificateInput, arg2 ...request.Option) (*apigateway.ClientCertificate, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClientCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.ClientCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientCertificateWithContext indicates an expected call of GetClientCertificateWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetClientCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCertificateWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetClientCertificateWithContext), varargs...)
}

// GetClientCertificateRequest mocks base method
func (m *MockAPIGatewayAPI) GetClientCertificateRequest(arg0 *apigateway.GetClientCertificateInput) (*request.Request, *apigateway.ClientCertificate) {
	ret := m.ctrl.Call(m, "GetClientCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.ClientCertificate)
	return ret0, ret1
}

// GetClientCertificateRequest indicates an expected call of GetClientCertificateRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetClientCertificateRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCertificateRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetClientCertificateRequest), arg0)
}

// GetClientCertificates mocks base method
func (m *MockAPIGatewayAPI) GetClientCertificates(arg0 *apigateway.GetClientCertificatesInput) (*apigateway.GetClientCertificatesOutput, error) {
	ret := m.ctrl.Call(m, "GetClientCertificates", arg0)
	ret0, _ := ret[0].(*apigateway.GetClientCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientCertificates indicates an expected call of GetClientCertificates
func (mr *MockAPIGatewayAPIMockRecorder) GetClientCertificates(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCertificates", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetClientCertificates), arg0)
}

// GetClientCertificatesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetClientCertificatesWithContext(arg0 aws.Context, arg1 *apigateway.GetClientCertificatesInput, arg2 ...request.Option) (*apigateway.GetClientCertificatesOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClientCertificatesWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetClientCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientCertificatesWithContext indicates an expected call of GetClientCertificatesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetClientCertificatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCertificatesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetClientCertificatesWithContext), varargs...)
}

// GetClientCertificatesRequest mocks base method
func (m *MockAPIGatewayAPI) GetClientCertificatesRequest(arg0 *apigateway.GetClientCertificatesInput) (*request.Request, *apigateway.GetClientCertificatesOutput) {
	ret := m.ctrl.Call(m, "GetClientCertificatesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetClientCertificatesOutput)
	return ret0, ret1
}

// GetClientCertificatesRequest indicates an expected call of GetClientCertificatesRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetClientCertificatesRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCertificatesRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetClientCertificatesRequest), arg0)
}

// GetClientCertificatesPages mocks base method
func (m *MockAPIGatewayAPI) GetClientCertificatesPages(arg0 *apigateway.GetClientCertificatesInput, arg1 func(*apigateway.GetClientCertificatesOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "GetClientCertificatesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClientCertificatesPages indicates an expected call of GetClientCertificatesPages
func (mr *MockAPIGatewayAPIMockRecorder) GetClientCertificatesPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCertificatesPages", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetClientCertificatesPages), arg0, arg1)
}

// GetClientCertificatesPagesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetClientCertificatesPagesWithContext(arg0 aws.Context, arg1 *apigateway.GetClientCertificatesInput, arg2 func(*apigateway.GetClientCertificatesOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClientCertificatesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClientCertificatesPagesWithContext indicates an expected call of GetClientCertificatesPagesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetClientCertificatesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCertificatesPagesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetClientCertificatesPagesWithContext), varargs...)
}

// GetDeployment mocks base method
func (m *MockAPIGatewayAPI) GetDeployment(arg0 *apigateway.GetDeploymentInput) (*apigateway.Deployment, error) {
	ret := m.ctrl.Call(m, "GetDeployment", arg0)
	ret0, _ := ret[0].(*apigateway.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment
func (mr *MockAPIGatewayAPIMockRecorder) GetDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDeployment), arg0)
}

// GetDeploymentWithContext mocks base method
func (m *MockAPIGatewayAPI) GetDeploymentWithContext(arg0 aws.Context, arg1 *apigateway.GetDeploymentInput, arg2 ...request.Option) (*apigateway.Deployment, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentWithContext indicates an expected call of GetDeploymentWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDeploymentWithContext), varargs...)
}

// GetDeploymentRequest mocks base method
func (m *MockAPIGatewayAPI) GetDeploymentRequest(arg0 *apigateway.GetDeploymentInput) (*request.Request, *apigateway.Deployment) {
	ret := m.ctrl.Call(m, "GetDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Deployment)
	return ret0, ret1
}

// GetDeploymentRequest indicates an expected call of GetDeploymentRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetDeploymentRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDeploymentRequest), arg0)
}

// GetDeployments mocks base method
func (m *MockAPIGatewayAPI) GetDeployments(arg0 *apigateway.GetDeploymentsInput) (*apigateway.GetDeploymentsOutput, error) {
	ret := m.ctrl.Call(m, "GetDeployments", arg0)
	ret0, _ := ret[0].(*apigateway.GetDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployments indicates an expected call of GetDeployments
func (mr *MockAPIGatewayAPIMockRecorder) GetDeployments(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployments", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDeployments), arg0)
}

// GetDeploymentsWithContext mocks base method
func (m *MockAPIGatewayAPI) GetDeploymentsWithContext(arg0 aws.Context, arg1 *apigateway.GetDeploymentsInput, arg2 ...request.Option) (*apigateway.GetDeploymentsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentsWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetDeploymentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentsWithContext indicates an expected call of GetDeploymentsWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetDeploymentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDeploymentsWithContext), varargs...)
}

// GetDeploymentsRequest mocks base method
func (m *MockAPIGatewayAPI) GetDeploymentsRequest(arg0 *apigateway.GetDeploymentsInput) (*request.Request, *apigateway.GetDeploymentsOutput) {
	ret := m.ctrl.Call(m, "GetDeploymentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetDeploymentsOutput)
	return ret0, ret1
}

// GetDeploymentsRequest indicates an expected call of GetDeploymentsRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetDeploymentsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDeploymentsRequest), arg0)
}

// GetDeploymentsPages mocks base method
func (m *MockAPIGatewayAPI) GetDeploymentsPages(arg0 *apigateway.GetDeploymentsInput, arg1 func(*apigateway.GetDeploymentsOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "GetDeploymentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDeploymentsPages indicates an expected call of GetDeploymentsPages
func (mr *MockAPIGatewayAPIMockRecorder) GetDeploymentsPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsPages", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDeploymentsPages), arg0, arg1)
}

// GetDeploymentsPagesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetDeploymentsPagesWithContext(arg0 aws.Context, arg1 *apigateway.GetDeploymentsInput, arg2 func(*apigateway.GetDeploymentsOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDeploymentsPagesWithContext indicates an expected call of GetDeploymentsPagesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetDeploymentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentsPagesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDeploymentsPagesWithContext), varargs...)
}

// GetDocumentationPart mocks base method
func (m *MockAPIGatewayAPI) GetDocumentationPart(arg0 *apigateway.GetDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	ret := m.ctrl.Call(m, "GetDocumentationPart", arg0)
	ret0, _ := ret[0].(*apigateway.DocumentationPart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentationPart indicates an expected call of GetDocumentationPart
func (mr *MockAPIGatewayAPIMockRecorder) GetDocumentationPart(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationPart", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDocumentationPart), arg0)
}

// GetDocumentationPartWithContext mocks base method
func (m *MockAPIGatewayAPI) GetDocumentationPartWithContext(arg0 aws.Context, arg1 *apigateway.GetDocumentationPartInput, arg2 ...request.Option) (*apigateway.DocumentationPart, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentationPartWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DocumentationPart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentationPartWithContext indicates an expected call of GetDocumentationPartWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetDocumentationPartWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationPartWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDocumentationPartWithContext), varargs...)
}

// GetDocumentationPartRequest mocks base method
func (m *MockAPIGatewayAPI) GetDocumentationPartRequest(arg0 *apigateway.GetDocumentationPartInput) (*request.Request, *apigateway.DocumentationPart) {
	ret := m.ctrl.Call(m, "GetDocumentationPartRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DocumentationPart)
	return ret0, ret1
}

// GetDocumentationPartRequest indicates an expected call of GetDocumentationPartRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetDocumentationPartRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationPartRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDocumentationPartRequest), arg0)
}

// GetDocumentationParts mocks base method
func (m *MockAPIGatewayAPI) GetDocumentationParts(arg0 *apigateway.GetDocumentationPartsInput) (*apigateway.GetDocumentationPartsOutput, error) {
	ret := m.ctrl.Call(m, "GetDocumentationParts", arg0)
	ret0, _ := ret[0].(*apigateway.GetDocumentationPartsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentationParts indicates an expected call of GetDocumentationParts
func (mr *MockAPIGatewayAPIMockRecorder) GetDocumentationParts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationParts", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDocumentationParts), arg0)
}

// GetDocumentationPartsWithContext mocks base method
func (m *MockAPIGatewayAPI) GetDocumentationPartsWithContext(arg0 aws.Context, arg1 *apigateway.GetDocumentationPartsInput, arg2 ...request.Option) (*apigateway.GetDocumentationPartsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentationPartsWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetDocumentationPartsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentationPartsWithContext indicates an expected call of GetDocumentationPartsWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetDocumentationPartsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationPartsWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDocumentationPartsWithContext), varargs...)
}

// GetDocumentationPartsRequest mocks base method
func (m *MockAPIGatewayAPI) GetDocumentationPartsRequest(arg0 *apigateway.GetDocumentationPartsInput) (*request.Request, *apigateway.GetDocumentationPartsOutput) {
	ret := m.ctrl.Call(m, "GetDocumentationPartsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetDocumentationPartsOutput)
	return ret0, ret1
}

// GetDocumentationPartsRequest indicates an expected call of GetDocumentationPartsRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetDocumentationPartsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationPartsRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDocumentationPartsRequest), arg0)
}

// GetDocumentationVersion mocks base method
func (m *MockAPIGatewayAPI) GetDocumentationVersion(arg0 *apigateway.GetDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	ret := m.ctrl.Call(m, "GetDocumentationVersion", arg0)
	ret0, _ := ret[0].(*apigateway.DocumentationVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentationVersion indicates an expected call of GetDocumentationVersion
func (mr *MockAPIGatewayAPIMockRecorder) GetDocumentationVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationVersion", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDocumentationVersion), arg0)
}

// GetDocumentationVersionWithContext mocks base method
func (m *MockAPIGatewayAPI) GetDocumentationVersionWithContext(arg0 aws.Context, arg1 *apigateway.GetDocumentationVersionInput, arg2 ...request.Option) (*apigateway.DocumentationVersion, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DocumentationVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentationVersionWithContext indicates an expected call of GetDocumentationVersionWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetDocumentationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationVersionWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDocumentationVersionWithContext), varargs...)
}

// GetDocumentationVersionRequest mocks base method
func (m *MockAPIGatewayAPI) GetDocumentationVersionRequest(arg0 *apigateway.GetDocumentationVersionInput) (*request.Request, *apigateway.DocumentationVersion) {
	ret := m.ctrl.Call(m, "GetDocumentationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DocumentationVersion)
	return ret0, ret1
}

// GetDocumentationVersionRequest indicates an expected call of GetDocumentationVersionRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetDocumentationVersionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationVersionRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDocumentationVersionRequest), arg0)
}

// GetDocumentationVersions mocks base method
func (m *MockAPIGatewayAPI) GetDocumentationVersions(arg0 *apigateway.GetDocumentationVersionsInput) (*apigateway.GetDocumentationVersionsOutput, error) {
	ret := m.ctrl.Call(m, "GetDocumentationVersions", arg0)
	ret0, _ := ret[0].(*apigateway.GetDocumentationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentationVersions indicates an expected call of GetDocumentationVersions
func (mr *MockAPIGatewayAPIMockRecorder) GetDocumentationVersions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationVersions", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDocumentationVersions), arg0)
}

// GetDocumentationVersionsWithContext mocks base method
func (m *MockAPIGatewayAPI) GetDocumentationVersionsWithContext(arg0 aws.Context, arg1 *apigateway.GetDocumentationVersionsInput, arg2 ...request.Option) (*apigateway.GetDocumentationVersionsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentationVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetDocumentationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentationVersionsWithContext indicates an expected call of GetDocumentationVersionsWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetDocumentationVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationVersionsWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDocumentationVersionsWithContext), varargs...)
}

// GetDocumentationVersionsRequest mocks base method
func (m *MockAPIGatewayAPI) GetDocumentationVersionsRequest(arg0 *apigateway.GetDocumentationVersionsInput) (*request.Request, *apigateway.GetDocumentationVersionsOutput) {
	ret := m.ctrl.Call(m, "GetDocumentationVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetDocumentationVersionsOutput)
	return ret0, ret1
}

// GetDocumentationVersionsRequest indicates an expected call of GetDocumentationVersionsRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetDocumentationVersionsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentationVersionsRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDocumentationVersionsRequest), arg0)
}

// GetDomainName mocks base method
func (m *MockAPIGatewayAPI) GetDomainName(arg0 *apigateway.GetDomainNameInput) (*apigateway.DomainName, error) {
	ret := m.ctrl.Call(m, "GetDomainName", arg0)
	ret0, _ := ret[0].(*apigateway.DomainName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainName indicates an expected call of GetDomainName
func (mr *MockAPIGatewayAPIMockRecorder) GetDomainName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainName", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDomainName), arg0)
}

// GetDomainNameWithContext mocks base method
func (m *MockAPIGatewayAPI) GetDomainNameWithContext(arg0 aws.Context, arg1 *apigateway.GetDomainNameInput, arg2 ...request.Option) (*apigateway.DomainName, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainNameWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DomainName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainNameWithContext indicates an expected call of GetDomainNameWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetDomainNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNameWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDomainNameWithContext), varargs...)
}

// GetDomainNameRequest mocks base method
func (m *MockAPIGatewayAPI) GetDomainNameRequest(arg0 *apigateway.GetDomainNameInput) (*request.Request, *apigateway.DomainName) {
	ret := m.ctrl.Call(m, "GetDomainNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DomainName)
	return ret0, ret1
}

// GetDomainNameRequest indicates an expected call of GetDomainNameRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetDomainNameRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNameRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDomainNameRequest), arg0)
}

// GetDomainNames mocks base method
func (m *MockAPIGatewayAPI) GetDomainNames(arg0 *apigateway.GetDomainNamesInput) (*apigateway.GetDomainNamesOutput, error) {
	ret := m.ctrl.Call(m, "GetDomainNames", arg0)
	ret0, _ := ret[0].(*apigateway.GetDomainNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainNames indicates an expected call of GetDomainNames
func (mr *MockAPIGatewayAPIMockRecorder) GetDomainNames(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNames", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDomainNames), arg0)
}

// GetDomainNamesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetDomainNamesWithContext(arg0 aws.Context, arg1 *apigateway.GetDomainNamesInput, arg2 ...request.Option) (*apigateway.GetDomainNamesOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainNamesWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetDomainNamesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainNamesWithContext indicates an expected call of GetDomainNamesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetDomainNamesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNamesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDomainNamesWithContext), varargs...)
}

// GetDomainNamesRequest mocks base method
func (m *MockAPIGatewayAPI) GetDomainNamesRequest(arg0 *apigateway.GetDomainNamesInput) (*request.Request, *apigateway.GetDomainNamesOutput) {
	ret := m.ctrl.Call(m, "GetDomainNamesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetDomainNamesOutput)
	return ret0, ret1
}

// GetDomainNamesRequest indicates an expected call of GetDomainNamesRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetDomainNamesRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNamesRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDomainNamesRequest), arg0)
}

// GetDomainNamesPages mocks base method
func (m *MockAPIGatewayAPI) GetDomainNamesPages(arg0 *apigateway.GetDomainNamesInput, arg1 func(*apigateway.GetDomainNamesOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "GetDomainNamesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDomainNamesPages indicates an expected call of GetDomainNamesPages
func (mr *MockAPIGatewayAPIMockRecorder) GetDomainNamesPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNamesPages", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDomainNamesPages), arg0, arg1)
}

// GetDomainNamesPagesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetDomainNamesPagesWithContext(arg0 aws.Context, arg1 *apigateway.GetDomainNamesInput, arg2 func(*apigateway.GetDomainNamesOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainNamesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDomainNamesPagesWithContext indicates an expected call of GetDomainNamesPagesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetDomainNamesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainNamesPagesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetDomainNamesPagesWithContext), varargs...)
}

// GetExport mocks base method
func (m *MockAPIGatewayAPI) GetExport(arg0 *apigateway.GetExportInput) (*apigateway.GetExportOutput, error) {
	ret := m.ctrl.Call(m, "GetExport", arg0)
	ret0, _ := ret[0].(*apigateway.GetExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExport indicates an expected call of GetExport
func (mr *MockAPIGatewayAPIMockRecorder) GetExport(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExport", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetExport), arg0)
}

// GetExportWithContext mocks base method
func (m *MockAPIGatewayAPI) GetExportWithContext(arg0 aws.Context, arg1 *apigateway.GetExportInput, arg2 ...request.Option) (*apigateway.GetExportOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExportWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExportWithContext indicates an expected call of GetExportWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExportWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetExportWithContext), varargs...)
}

// GetExportRequest mocks base method
func (m *MockAPIGatewayAPI) GetExportRequest(arg0 *apigateway.GetExportInput) (*request.Request, *apigateway.GetExportOutput) {
	ret := m.ctrl.Call(m, "GetExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetExportOutput)
	return ret0, ret1
}

// GetExportRequest indicates an expected call of GetExportRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetExportRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExportRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetExportRequest), arg0)
}

// GetGatewayResponse mocks base method
func (m *MockAPIGatewayAPI) GetGatewayResponse(arg0 *apigateway.GetGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	ret := m.ctrl.Call(m, "GetGatewayResponse", arg0)
	ret0, _ := ret[0].(*apigateway.UpdateGatewayResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGatewayResponse indicates an expected call of GetGatewayResponse
func (mr *MockAPIGatewayAPIMockRecorder) GetGatewayResponse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayResponse", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetGatewayResponse), arg0)
}

// GetGatewayResponseWithContext mocks base method
func (m *MockAPIGatewayAPI) GetGatewayResponseWithContext(arg0 aws.Context, arg1 *apigateway.GetGatewayResponseInput, arg2 ...request.Option) (*apigateway.UpdateGatewayResponseOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGatewayResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.UpdateGatewayResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGatewayResponseWithContext indicates an expected call of GetGatewayResponseWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetGatewayResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayResponseWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetGatewayResponseWithContext), varargs...)
}

// GetGatewayResponseRequest mocks base method
func (m *MockAPIGatewayAPI) GetGatewayResponseRequest(arg0 *apigateway.GetGatewayResponseInput) (*request.Request, *apigateway.UpdateGatewayResponseOutput) {
	ret := m.ctrl.Call(m, "GetGatewayResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.UpdateGatewayResponseOutput)
	return ret0, ret1
}

// GetGatewayResponseRequest indicates an expected call of GetGatewayResponseRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetGatewayResponseRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayResponseRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetGatewayResponseRequest), arg0)
}

// GetGatewayResponses mocks base method
func (m *MockAPIGatewayAPI) GetGatewayResponses(arg0 *apigateway.GetGatewayResponsesInput) (*apigateway.GetGatewayResponsesOutput, error) {
	ret := m.ctrl.Call(m, "GetGatewayResponses", arg0)
	ret0, _ := ret[0].(*apigateway.GetGatewayResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGatewayResponses indicates an expected call of GetGatewayResponses
func (mr *MockAPIGatewayAPIMockRecorder) GetGatewayResponses(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayResponses", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetGatewayResponses), arg0)
}

// GetGatewayResponsesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetGatewayResponsesWithContext(arg0 aws.Context, arg1 *apigateway.GetGatewayResponsesInput, arg2 ...request.Option) (*apigateway.GetGatewayResponsesOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGatewayResponsesWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetGatewayResponsesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGatewayResponsesWithContext indicates an expected call of GetGatewayResponsesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetGatewayResponsesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayResponsesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetGatewayResponsesWithContext), varargs...)
}

// GetGatewayResponsesRequest mocks base method
func (m *MockAPIGatewayAPI) GetGatewayResponsesRequest(arg0 *apigateway.GetGatewayResponsesInput) (*request.Request, *apigateway.GetGatewayResponsesOutput) {
	ret := m.ctrl.Call(m, "GetGatewayResponsesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetGatewayResponsesOutput)
	return ret0, ret1
}

// GetGatewayResponsesRequest indicates an expected call of GetGatewayResponsesRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetGatewayResponsesRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewayResponsesRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetGatewayResponsesRequest), arg0)
}

// GetIntegration mocks base method
func (m *MockAPIGatewayAPI) GetIntegration(arg0 *apigateway.GetIntegrationInput) (*apigateway.Integration, error) {
	ret := m.ctrl.Call(m, "GetIntegration", arg0)
	ret0, _ := ret[0].(*apigateway.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegration indicates an expected call of GetIntegration
func (mr *MockAPIGatewayAPIMockRecorder) GetIntegration(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegration", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetIntegration), arg0)
}

// GetIntegrationWithContext mocks base method
func (m *MockAPIGatewayAPI) GetIntegrationWithContext(arg0 aws.Context, arg1 *apigateway.GetIntegrationInput, arg2 ...request.Option) (*apigateway.Integration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegrationWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationWithContext indicates an expected call of GetIntegrationWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetIntegrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetIntegrationWithContext), varargs...)
}

// GetIntegrationRequest mocks base method
func (m *MockAPIGatewayAPI) GetIntegrationRequest(arg0 *apigateway.GetIntegrationInput) (*request.Request, *apigateway.Integration) {
	ret := m.ctrl.Call(m, "GetIntegrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Integration)
	return ret0, ret1
}

// GetIntegrationRequest indicates an expected call of GetIntegrationRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetIntegrationRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetIntegrationRequest), arg0)
}

// GetIntegrationResponse mocks base method
func (m *MockAPIGatewayAPI) GetIntegrationResponse(arg0 *apigateway.GetIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	ret := m.ctrl.Call(m, "GetIntegrationResponse", arg0)
	ret0, _ := ret[0].(*apigateway.IntegrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationResponse indicates an expected call of GetIntegrationResponse
func (mr *MockAPIGatewayAPIMockRecorder) GetIntegrationResponse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationResponse", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetIntegrationResponse), arg0)
}

// GetIntegrationResponseWithContext mocks base method
func (m *MockAPIGatewayAPI) GetIntegrationResponseWithContext(arg0 aws.Context, arg1 *apigateway.GetIntegrationResponseInput, arg2 ...request.Option) (*apigateway.IntegrationResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIntegrationResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.IntegrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrationResponseWithContext indicates an expected call of GetIntegrationResponseWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetIntegrationResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationResponseWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetIntegrationResponseWithContext), varargs...)
}

// GetIntegrationResponseRequest mocks base method
func (m *MockAPIGatewayAPI) GetIntegrationResponseRequest(arg0 *apigateway.GetIntegrationResponseInput) (*request.Request, *apigateway.IntegrationResponse) {
	ret := m.ctrl.Call(m, "GetIntegrationResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.IntegrationResponse)
	return ret0, ret1
}

// GetIntegrationResponseRequest indicates an expected call of GetIntegrationResponseRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetIntegrationResponseRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationResponseRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetIntegrationResponseRequest), arg0)
}

// GetMethod mocks base method
func (m *MockAPIGatewayAPI) GetMethod(arg0 *apigateway.GetMethodInput) (*apigateway.Method, error) {
	ret := m.ctrl.Call(m, "GetMethod", arg0)
	ret0, _ := ret[0].(*apigateway.Method)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethod indicates an expected call of GetMethod
func (mr *MockAPIGatewayAPIMockRecorder) GetMethod(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethod", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetMethod), arg0)
}

// GetMethodWithContext mocks base method
func (m *MockAPIGatewayAPI) GetMethodWithContext(arg0 aws.Context, arg1 *apigateway.GetMethodInput, arg2 ...request.Option) (*apigateway.Method, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMethodWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Method)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethodWithContext indicates an expected call of GetMethodWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetMethodWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethodWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetMethodWithContext), varargs...)
}

// GetMethodRequest mocks base method
func (m *MockAPIGatewayAPI) GetMethodRequest(arg0 *apigateway.GetMethodInput) (*request.Request, *apigateway.Method) {
	ret := m.ctrl.Call(m, "GetMethodRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Method)
	return ret0, ret1
}

// GetMethodRequest indicates an expected call of GetMethodRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetMethodRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethodRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetMethodRequest), arg0)
}

// GetMethodResponse mocks base method
func (m *MockAPIGatewayAPI) GetMethodResponse(arg0 *apigateway.GetMethodResponseInput) (*apigateway.MethodResponse, error) {
	ret := m.ctrl.Call(m, "GetMethodResponse", arg0)
	ret0, _ := ret[0].(*apigateway.MethodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethodResponse indicates an expected call of GetMethodResponse
func (mr *MockAPIGatewayAPIMockRecorder) GetMethodResponse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethodResponse", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetMethodResponse), arg0)
}

// GetMethodResponseWithContext mocks base method
func (m *MockAPIGatewayAPI) GetMethodResponseWithContext(arg0 aws.Context, arg1 *apigateway.GetMethodResponseInput, arg2 ...request.Option) (*apigateway.MethodResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMethodResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.MethodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethodResponseWithContext indicates an expected call of GetMethodResponseWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetMethodResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethodResponseWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetMethodResponseWithContext), varargs...)
}

// GetMethodResponseRequest mocks base method
func (m *MockAPIGatewayAPI) GetMethodResponseRequest(arg0 *apigateway.GetMethodResponseInput) (*request.Request, *apigateway.MethodResponse) {
	ret := m.ctrl.Call(m, "GetMethodResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.MethodResponse)
	return ret0, ret1
}

// GetMethodResponseRequest indicates an expected call of GetMethodResponseRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetMethodResponseRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethodResponseRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetMethodResponseRequest), arg0)
}

// GetModel mocks base method
func (m *MockAPIGatewayAPI) GetModel(arg0 *apigateway.GetModelInput) (*apigateway.Model, error) {
	ret := m.ctrl.Call(m, "GetModel", arg0)
	ret0, _ := ret[0].(*apigateway.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel
func (mr *MockAPIGatewayAPIMockRecorder) GetModel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetModel), arg0)
}

// GetModelWithContext mocks base method
func (m *MockAPIGatewayAPI) GetModelWithContext(arg0 aws.Context, arg1 *apigateway.GetModelInput, arg2 ...request.Option) (*apigateway.Model, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelWithContext indicates an expected call of GetModelWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetModelWithContext), varargs...)
}

// GetModelRequest mocks base method
func (m *MockAPIGatewayAPI) GetModelRequest(arg0 *apigateway.GetModelInput) (*request.Request, *apigateway.Model) {
	ret := m.ctrl.Call(m, "GetModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Model)
	return ret0, ret1
}

// GetModelRequest indicates an expected call of GetModelRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetModelRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetModelRequest), arg0)
}

// GetModelTemplate mocks base method
func (m *MockAPIGatewayAPI) GetModelTemplate(arg0 *apigateway.GetModelTemplateInput) (*apigateway.GetModelTemplateOutput, error) {
	ret := m.ctrl.Call(m, "GetModelTemplate", arg0)
	ret0, _ := ret[0].(*apigateway.GetModelTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTemplate indicates an expected call of GetModelTemplate
func (mr *MockAPIGatewayAPIMockRecorder) GetModelTemplate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTemplate", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetModelTemplate), arg0)
}

// GetModelTemplateWithContext mocks base method
func (m *MockAPIGatewayAPI) GetModelTemplateWithContext(arg0 aws.Context, arg1 *apigateway.GetModelTemplateInput, arg2 ...request.Option) (*apigateway.GetModelTemplateOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelTemplateWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetModelTemplateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTemplateWithContext indicates an expected call of GetModelTemplateWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetModelTemplateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTemplateWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetModelTemplateWithContext), varargs...)
}

// GetModelTemplateRequest mocks base method
func (m *MockAPIGatewayAPI) GetModelTemplateRequest(arg0 *apigateway.GetModelTemplateInput) (*request.Request, *apigateway.GetModelTemplateOutput) {
	ret := m.ctrl.Call(m, "GetModelTemplateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetModelTemplateOutput)
	return ret0, ret1
}

// GetModelTemplateRequest indicates an expected call of GetModelTemplateRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetModelTemplateRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTemplateRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetModelTemplateRequest), arg0)
}

// GetModels mocks base method
func (m *MockAPIGatewayAPI) GetModels(arg0 *apigateway.GetModelsInput) (*apigateway.GetModelsOutput, error) {
	ret := m.ctrl.Call(m, "GetModels", arg0)
	ret0, _ := ret[0].(*apigateway.GetModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModels indicates an expected call of GetModels
func (mr *MockAPIGatewayAPIMockRecorder) GetModels(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModels", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetModels), arg0)
}

// GetModelsWithContext mocks base method
func (m *MockAPIGatewayAPI) GetModelsWithContext(arg0 aws.Context, arg1 *apigateway.GetModelsInput, arg2 ...request.Option) (*apigateway.GetModelsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelsWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetModelsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelsWithContext indicates an expected call of GetModelsWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetModelsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelsWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetModelsWithContext), varargs...)
}

// GetModelsRequest mocks base method
func (m *MockAPIGatewayAPI) GetModelsRequest(arg0 *apigateway.GetModelsInput) (*request.Request, *apigateway.GetModelsOutput) {
	ret := m.ctrl.Call(m, "GetModelsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetModelsOutput)
	return ret0, ret1
}

// GetModelsRequest indicates an expected call of GetModelsRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetModelsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelsRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetModelsRequest), arg0)
}

// GetModelsPages mocks base method
func (m *MockAPIGatewayAPI) GetModelsPages(arg0 *apigateway.GetModelsInput, arg1 func(*apigateway.GetModelsOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "GetModelsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetModelsPages indicates an expected call of GetModelsPages
func (mr *MockAPIGatewayAPIMockRecorder) GetModelsPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelsPages", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetModelsPages), arg0, arg1)
}

// GetModelsPagesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetModelsPagesWithContext(arg0 aws.Context, arg1 *apigateway.GetModelsInput, arg2 func(*apigateway.GetModelsOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetModelsPagesWithContext indicates an expected call of GetModelsPagesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetModelsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelsPagesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetModelsPagesWithContext), varargs...)
}

// GetRequestValidator mocks base method
func (m *MockAPIGatewayAPI) GetRequestValidator(arg0 *apigateway.GetRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	ret := m.ctrl.Call(m, "GetRequestValidator", arg0)
	ret0, _ := ret[0].(*apigateway.UpdateRequestValidatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestValidator indicates an expected call of GetRequestValidator
func (mr *MockAPIGatewayAPIMockRecorder) GetRequestValidator(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestValidator", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRequestValidator), arg0)
}

// GetRequestValidatorWithContext mocks base method
func (m *MockAPIGatewayAPI) GetRequestValidatorWithContext(arg0 aws.Context, arg1 *apigateway.GetRequestValidatorInput, arg2 ...request.Option) (*apigateway.UpdateRequestValidatorOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRequestValidatorWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.UpdateRequestValidatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestValidatorWithContext indicates an expected call of GetRequestValidatorWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetRequestValidatorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestValidatorWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRequestValidatorWithContext), varargs...)
}

// GetRequestValidatorRequest mocks base method
func (m *MockAPIGatewayAPI) GetRequestValidatorRequest(arg0 *apigateway.GetRequestValidatorInput) (*request.Request, *apigateway.UpdateRequestValidatorOutput) {
	ret := m.ctrl.Call(m, "GetRequestValidatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.UpdateRequestValidatorOutput)
	return ret0, ret1
}

// GetRequestValidatorRequest indicates an expected call of GetRequestValidatorRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetRequestValidatorRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestValidatorRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRequestValidatorRequest), arg0)
}

// GetRequestValidators mocks base method
func (m *MockAPIGatewayAPI) GetRequestValidators(arg0 *apigateway.GetRequestValidatorsInput) (*apigateway.GetRequestValidatorsOutput, error) {
	ret := m.ctrl.Call(m, "GetRequestValidators", arg0)
	ret0, _ := ret[0].(*apigateway.GetRequestValidatorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestValidators indicates an expected call of GetRequestValidators
func (mr *MockAPIGatewayAPIMockRecorder) GetRequestValidators(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestValidators", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRequestValidators), arg0)
}

// GetRequestValidatorsWithContext mocks base method
func (m *MockAPIGatewayAPI) GetRequestValidatorsWithContext(arg0 aws.Context, arg1 *apigateway.GetRequestValidatorsInput, arg2 ...request.Option) (*apigateway.GetRequestValidatorsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRequestValidatorsWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetRequestValidatorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestValidatorsWithContext indicates an expected call of GetRequestValidatorsWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetRequestValidatorsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestValidatorsWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRequestValidatorsWithContext), varargs...)
}

// GetRequestValidatorsRequest mocks base method
func (m *MockAPIGatewayAPI) GetRequestValidatorsRequest(arg0 *apigateway.GetRequestValidatorsInput) (*request.Request, *apigateway.GetRequestValidatorsOutput) {
	ret := m.ctrl.Call(m, "GetRequestValidatorsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetRequestValidatorsOutput)
	return ret0, ret1
}

// GetRequestValidatorsRequest indicates an expected call of GetRequestValidatorsRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetRequestValidatorsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestValidatorsRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRequestValidatorsRequest), arg0)
}

// GetResource mocks base method
func (m *MockAPIGatewayAPI) GetResource(arg0 *apigateway.GetResourceInput) (*apigateway.Resource, error) {
	ret := m.ctrl.Call(m, "GetResource", arg0)
	ret0, _ := ret[0].(*apigateway.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource
func (mr *MockAPIGatewayAPIMockRecorder) GetResource(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetResource), arg0)
}

// GetResourceWithContext mocks base method
func (m *MockAPIGatewayAPI) GetResourceWithContext(arg0 aws.Context, arg1 *apigateway.GetResourceInput, arg2 ...request.Option) (*apigateway.Resource, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceWithContext indicates an expected call of GetResourceWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetResourceWithContext), varargs...)
}

// GetResourceRequest mocks base method
func (m *MockAPIGatewayAPI) GetResourceRequest(arg0 *apigateway.GetResourceInput) (*request.Request, *apigateway.Resource) {
	ret := m.ctrl.Call(m, "GetResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Resource)
	return ret0, ret1
}

// GetResourceRequest indicates an expected call of GetResourceRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetResourceRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetResourceRequest), arg0)
}

// GetResources mocks base method
func (m *MockAPIGatewayAPI) GetResources(arg0 *apigateway.GetResourcesInput) (*apigateway.GetResourcesOutput, error) {
	ret := m.ctrl.Call(m, "GetResources", arg0)
	ret0, _ := ret[0].(*apigateway.GetResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources
func (mr *MockAPIGatewayAPIMockRecorder) GetResources(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetResources), arg0)
}

// GetResourcesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetResourcesWithContext(arg0 aws.Context, arg1 *apigateway.GetResourcesInput, arg2 ...request.Option) (*apigateway.GetResourcesOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcesWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetResourcesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcesWithContext indicates an expected call of GetResourcesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetResourcesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetResourcesWithContext), varargs...)
}

// GetResourcesRequest mocks base method
func (m *MockAPIGatewayAPI) GetResourcesRequest(arg0 *apigateway.GetResourcesInput) (*request.Request, *apigateway.GetResourcesOutput) {
	ret := m.ctrl.Call(m, "GetResourcesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetResourcesOutput)
	return ret0, ret1
}

// GetResourcesRequest indicates an expected call of GetResourcesRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetResourcesRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetResourcesRequest), arg0)
}

// GetResourcesPages mocks base method
func (m *MockAPIGatewayAPI) GetResourcesPages(arg0 *apigateway.GetResourcesInput, arg1 func(*apigateway.GetResourcesOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "GetResourcesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourcesPages indicates an expected call of GetResourcesPages
func (mr *MockAPIGatewayAPIMockRecorder) GetResourcesPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesPages", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetResourcesPages), arg0, arg1)
}

// GetResourcesPagesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetResourcesPagesWithContext(arg0 aws.Context, arg1 *apigateway.GetResourcesInput, arg2 func(*apigateway.GetResourcesOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourcesPagesWithContext indicates an expected call of GetResourcesPagesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetResourcesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesPagesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetResourcesPagesWithContext), varargs...)
}

// GetRestApi mocks base method
func (m *MockAPIGatewayAPI) GetRestApi(arg0 *apigateway.GetRestApiInput) (*apigateway.RestApi, error) {
	ret := m.ctrl.Call(m, "GetRestApi", arg0)
	ret0, _ := ret[0].(*apigateway.RestApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestApi indicates an expected call of GetRestApi
func (mr *MockAPIGatewayAPIMockRecorder) GetRestApi(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestApi", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRestApi), arg0)
}

// GetRestApiWithContext mocks base method
func (m *MockAPIGatewayAPI) GetRestApiWithContext(arg0 aws.Context, arg1 *apigateway.GetRestApiInput, arg2 ...request.Option) (*apigateway.RestApi, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRestApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.RestApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestApiWithContext indicates an expected call of GetRestApiWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetRestApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestApiWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRestApiWithContext), varargs...)
}

// GetRestApiRequest mocks base method
func (m *MockAPIGatewayAPI) GetRestApiRequest(arg0 *apigateway.GetRestApiInput) (*request.Request, *apigateway.RestApi) {
	ret := m.ctrl.Call(m, "GetRestApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.RestApi)
	return ret0, ret1
}

// GetRestApiRequest indicates an expected call of GetRestApiRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetRestApiRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestApiRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRestApiRequest), arg0)
}

// GetRestApis mocks base method
func (m *MockAPIGatewayAPI) GetRestApis(arg0 *apigateway.GetRestApisInput) (*apigateway.GetRestApisOutput, error) {
	ret := m.ctrl.Call(m, "GetRestApis", arg0)
	ret0, _ := ret[0].(*apigateway.GetRestApisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestApis indicates an expected call of GetRestApis
func (mr *MockAPIGatewayAPIMockRecorder) GetRestApis(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestApis", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRestApis), arg0)
}

// GetRestApisWithContext mocks base method
func (m *MockAPIGatewayAPI) GetRestApisWithContext(arg0 aws.Context, arg1 *apigateway.GetRestApisInput, arg2 ...request.Option) (*apigateway.GetRestApisOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRestApisWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetRestApisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestApisWithContext indicates an expected call of GetRestApisWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetRestApisWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestApisWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRestApisWithContext), varargs...)
}

// GetRestApisRequest mocks base method
func (m *MockAPIGatewayAPI) GetRestApisRequest(arg0 *apigateway.GetRestApisInput) (*request.Request, *apigateway.GetRestApisOutput) {
	ret := m.ctrl.Call(m, "GetRestApisRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetRestApisOutput)
	return ret0, ret1
}

// GetRestApisRequest indicates an expected call of GetRestApisRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetRestApisRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestApisRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRestApisRequest), arg0)
}

// GetRestApisPages mocks base method
func (m *MockAPIGatewayAPI) GetRestApisPages(arg0 *apigateway.GetRestApisInput, arg1 func(*apigateway.GetRestApisOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "GetRestApisPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRestApisPages indicates an expected call of GetRestApisPages
func (mr *MockAPIGatewayAPIMockRecorder) GetRestApisPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestApisPages", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRestApisPages), arg0, arg1)
}

// GetRestApisPagesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetRestApisPagesWithContext(arg0 aws.Context, arg1 *apigateway.GetRestApisInput, arg2 func(*apigateway.GetRestApisOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRestApisPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRestApisPagesWithContext indicates an expected call of GetRestApisPagesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetRestApisPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestApisPagesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetRestApisPagesWithContext), varargs...)
}

// GetSdk mocks base method
func (m *MockAPIGatewayAPI) GetSdk(arg0 *apigateway.GetSdkInput) (*apigateway.GetSdkOutput, error) {
	ret := m.ctrl.Call(m, "GetSdk", arg0)
	ret0, _ := ret[0].(*apigateway.GetSdkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSdk indicates an expected call of GetSdk
func (mr *MockAPIGatewayAPIMockRecorder) GetSdk(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSdk", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetSdk), arg0)
}

// GetSdkWithContext mocks base method
func (m *MockAPIGatewayAPI) GetSdkWithContext(arg0 aws.Context, arg1 *apigateway.GetSdkInput, arg2 ...request.Option) (*apigateway.GetSdkOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSdkWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetSdkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSdkWithContext indicates an expected call of GetSdkWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetSdkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSdkWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetSdkWithContext), varargs...)
}

// GetSdkRequest mocks base method
func (m *MockAPIGatewayAPI) GetSdkRequest(arg0 *apigateway.GetSdkInput) (*request.Request, *apigateway.GetSdkOutput) {
	ret := m.ctrl.Call(m, "GetSdkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetSdkOutput)
	return ret0, ret1
}

// GetSdkRequest indicates an expected call of GetSdkRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetSdkRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSdkRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetSdkRequest), arg0)
}

// GetSdkType mocks base method
func (m *MockAPIGatewayAPI) GetSdkType(arg0 *apigateway.GetSdkTypeInput) (*apigateway.SdkType, error) {
	ret := m.ctrl.Call(m, "GetSdkType", arg0)
	ret0, _ := ret[0].(*apigateway.SdkType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSdkType indicates an expected call of GetSdkType
func (mr *MockAPIGatewayAPIMockRecorder) GetSdkType(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSdkType", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetSdkType), arg0)
}

// GetSdkTypeWithContext mocks base method
func (m *MockAPIGatewayAPI) GetSdkTypeWithContext(arg0 aws.Context, arg1 *apigateway.GetSdkTypeInput, arg2 ...request.Option) (*apigateway.SdkType, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSdkTypeWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.SdkType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSdkTypeWithContext indicates an expected call of GetSdkTypeWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetSdkTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSdkTypeWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetSdkTypeWithContext), varargs...)
}

// GetSdkTypeRequest mocks base method
func (m *MockAPIGatewayAPI) GetSdkTypeRequest(arg0 *apigateway.GetSdkTypeInput) (*request.Request, *apigateway.SdkType) {
	ret := m.ctrl.Call(m, "GetSdkTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.SdkType)
	return ret0, ret1
}

// GetSdkTypeRequest indicates an expected call of GetSdkTypeRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetSdkTypeRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSdkTypeRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetSdkTypeRequest), arg0)
}

// GetSdkTypes mocks base method
func (m *MockAPIGatewayAPI) GetSdkTypes(arg0 *apigateway.GetSdkTypesInput) (*apigateway.GetSdkTypesOutput, error) {
	ret := m.ctrl.Call(m, "GetSdkTypes", arg0)
	ret0, _ := ret[0].(*apigateway.GetSdkTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSdkTypes indicates an expected call of GetSdkTypes
func (mr *MockAPIGatewayAPIMockRecorder) GetSdkTypes(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSdkTypes", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetSdkTypes), arg0)
}

// GetSdkTypesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetSdkTypesWithContext(arg0 aws.Context, arg1 *apigateway.GetSdkTypesInput, arg2 ...request.Option) (*apigateway.GetSdkTypesOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSdkTypesWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetSdkTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSdkTypesWithContext indicates an expected call of GetSdkTypesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetSdkTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSdkTypesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetSdkTypesWithContext), varargs...)
}

// GetSdkTypesRequest mocks base method
func (m *MockAPIGatewayAPI) GetSdkTypesRequest(arg0 *apigateway.GetSdkTypesInput) (*request.Request, *apigateway.GetSdkTypesOutput) {
	ret := m.ctrl.Call(m, "GetSdkTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetSdkTypesOutput)
	return ret0, ret1
}

// GetSdkTypesRequest indicates an expected call of GetSdkTypesRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetSdkTypesRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSdkTypesRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetSdkTypesRequest), arg0)
}

// GetStage mocks base method
func (m *MockAPIGatewayAPI) GetStage(arg0 *apigateway.GetStageInput) (*apigateway.Stage, error) {
	ret := m.ctrl.Call(m, "GetStage", arg0)
	ret0, _ := ret[0].(*apigateway.Stage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStage indicates an expected call of GetStage
func (mr *MockAPIGatewayAPIMockRecorder) GetStage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStage", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetStage), arg0)
}

// GetStageWithContext mocks base method
func (m *MockAPIGatewayAPI) GetStageWithContext(arg0 aws.Context, arg1 *apigateway.GetStageInput, arg2 ...request.Option) (*apigateway.Stage, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStageWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Stage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStageWithContext indicates an expected call of GetStageWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetStageWithContext), varargs...)
}

// GetStageRequest mocks base method
func (m *MockAPIGatewayAPI) GetStageRequest(arg0 *apigateway.GetStageInput) (*request.Request, *apigateway.Stage) {
	ret := m.ctrl.Call(m, "GetStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Stage)
	return ret0, ret1
}

// GetStageRequest indicates an expected call of GetStageRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetStageRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetStageRequest), arg0)
}

// GetStages mocks base method
func (m *MockAPIGatewayAPI) GetStages(arg0 *apigateway.GetStagesInput) (*apigateway.GetStagesOutput, error) {
	ret := m.ctrl.Call(m, "GetStages", arg0)
	ret0, _ := ret[0].(*apigateway.GetStagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStages indicates an expected call of GetStages
func (mr *MockAPIGatewayAPIMockRecorder) GetStages(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStages", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetStages), arg0)
}

// GetStagesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetStagesWithContext(arg0 aws.Context, arg1 *apigateway.GetStagesInput, arg2 ...request.Option) (*apigateway.GetStagesOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStagesWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetStagesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStagesWithContext indicates an expected call of GetStagesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetStagesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStagesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetStagesWithContext), varargs...)
}

// GetStagesRequest mocks base method
func (m *MockAPIGatewayAPI) GetStagesRequest(arg0 *apigateway.GetStagesInput) (*request.Request, *apigateway.GetStagesOutput) {
	ret := m.ctrl.Call(m, "GetStagesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetStagesOutput)
	return ret0, ret1
}

// GetStagesRequest indicates an expected call of GetStagesRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetStagesRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStagesRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetStagesRequest), arg0)
}

// GetUsage mocks base method
func (m *MockAPIGatewayAPI) GetUsage(arg0 *apigateway.GetUsageInput) (*apigateway.Usage, error) {
	ret := m.ctrl.Call(m, "GetUsage", arg0)
	ret0, _ := ret[0].(*apigateway.Usage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsage indicates an expected call of GetUsage
func (mr *MockAPIGatewayAPIMockRecorder) GetUsage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsage", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsage), arg0)
}

// GetUsageWithContext mocks base method
func (m *MockAPIGatewayAPI) GetUsageWithContext(arg0 aws.Context, arg1 *apigateway.GetUsageInput, arg2 ...request.Option) (*apigateway.Usage, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsageWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Usage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsageWithContext indicates an expected call of GetUsageWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetUsageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsageWithContext), varargs...)
}

// GetUsageRequest mocks base method
func (m *MockAPIGatewayAPI) GetUsageRequest(arg0 *apigateway.GetUsageInput) (*request.Request, *apigateway.Usage) {
	ret := m.ctrl.Call(m, "GetUsageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Usage)
	return ret0, ret1
}

// GetUsageRequest indicates an expected call of GetUsageRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetUsageRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsageRequest), arg0)
}

// GetUsagePages mocks base method
func (m *MockAPIGatewayAPI) GetUsagePages(arg0 *apigateway.GetUsageInput, arg1 func(*apigateway.Usage, bool) bool) error {
	ret := m.ctrl.Call(m, "GetUsagePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUsagePages indicates an expected call of GetUsagePages
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePages", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePages), arg0, arg1)
}

// GetUsagePagesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetUsagePagesWithContext(arg0 aws.Context, arg1 *apigateway.GetUsageInput, arg2 func(*apigateway.Usage, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsagePagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUsagePagesWithContext indicates an expected call of GetUsagePagesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePagesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePagesWithContext), varargs...)
}

// GetUsagePlan mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlan(arg0 *apigateway.GetUsagePlanInput) (*apigateway.UsagePlan, error) {
	ret := m.ctrl.Call(m, "GetUsagePlan", arg0)
	ret0, _ := ret[0].(*apigateway.UsagePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsagePlan indicates an expected call of GetUsagePlan
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlan(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlan", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlan), arg0)
}

// GetUsagePlanWithContext mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlanWithContext(arg0 aws.Context, arg1 *apigateway.GetUsagePlanInput, arg2 ...request.Option) (*apigateway.UsagePlan, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsagePlanWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.UsagePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsagePlanWithContext indicates an expected call of GetUsagePlanWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlanWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlanWithContext), varargs...)
}

// GetUsagePlanRequest mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlanRequest(arg0 *apigateway.GetUsagePlanInput) (*request.Request, *apigateway.UsagePlan) {
	ret := m.ctrl.Call(m, "GetUsagePlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.UsagePlan)
	return ret0, ret1
}

// GetUsagePlanRequest indicates an expected call of GetUsagePlanRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlanRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlanRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlanRequest), arg0)
}

// GetUsagePlanKey mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlanKey(arg0 *apigateway.GetUsagePlanKeyInput) (*apigateway.UsagePlanKey, error) {
	ret := m.ctrl.Call(m, "GetUsagePlanKey", arg0)
	ret0, _ := ret[0].(*apigateway.UsagePlanKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsagePlanKey indicates an expected call of GetUsagePlanKey
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlanKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlanKey", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlanKey), arg0)
}

// GetUsagePlanKeyWithContext mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlanKeyWithContext(arg0 aws.Context, arg1 *apigateway.GetUsagePlanKeyInput, arg2 ...request.Option) (*apigateway.UsagePlanKey, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsagePlanKeyWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.UsagePlanKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsagePlanKeyWithContext indicates an expected call of GetUsagePlanKeyWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlanKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlanKeyWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlanKeyWithContext), varargs...)
}

// GetUsagePlanKeyRequest mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlanKeyRequest(arg0 *apigateway.GetUsagePlanKeyInput) (*request.Request, *apigateway.UsagePlanKey) {
	ret := m.ctrl.Call(m, "GetUsagePlanKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.UsagePlanKey)
	return ret0, ret1
}

// GetUsagePlanKeyRequest indicates an expected call of GetUsagePlanKeyRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlanKeyRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlanKeyRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlanKeyRequest), arg0)
}

// GetUsagePlanKeys mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlanKeys(arg0 *apigateway.GetUsagePlanKeysInput) (*apigateway.GetUsagePlanKeysOutput, error) {
	ret := m.ctrl.Call(m, "GetUsagePlanKeys", arg0)
	ret0, _ := ret[0].(*apigateway.GetUsagePlanKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsagePlanKeys indicates an expected call of GetUsagePlanKeys
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlanKeys(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlanKeys", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlanKeys), arg0)
}

// GetUsagePlanKeysWithContext mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlanKeysWithContext(arg0 aws.Context, arg1 *apigateway.GetUsagePlanKeysInput, arg2 ...request.Option) (*apigateway.GetUsagePlanKeysOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsagePlanKeysWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetUsagePlanKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsagePlanKeysWithContext indicates an expected call of GetUsagePlanKeysWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlanKeysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlanKeysWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlanKeysWithContext), varargs...)
}

// GetUsagePlanKeysRequest mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlanKeysRequest(arg0 *apigateway.GetUsagePlanKeysInput) (*request.Request, *apigateway.GetUsagePlanKeysOutput) {
	ret := m.ctrl.Call(m, "GetUsagePlanKeysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetUsagePlanKeysOutput)
	return ret0, ret1
}

// GetUsagePlanKeysRequest indicates an expected call of GetUsagePlanKeysRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlanKeysRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlanKeysRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlanKeysRequest), arg0)
}

// GetUsagePlanKeysPages mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlanKeysPages(arg0 *apigateway.GetUsagePlanKeysInput, arg1 func(*apigateway.GetUsagePlanKeysOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "GetUsagePlanKeysPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUsagePlanKeysPages indicates an expected call of GetUsagePlanKeysPages
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlanKeysPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlanKeysPages", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlanKeysPages), arg0, arg1)
}

// GetUsagePlanKeysPagesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlanKeysPagesWithContext(arg0 aws.Context, arg1 *apigateway.GetUsagePlanKeysInput, arg2 func(*apigateway.GetUsagePlanKeysOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsagePlanKeysPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUsagePlanKeysPagesWithContext indicates an expected call of GetUsagePlanKeysPagesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlanKeysPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlanKeysPagesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlanKeysPagesWithContext), varargs...)
}

// GetUsagePlans mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlans(arg0 *apigateway.GetUsagePlansInput) (*apigateway.GetUsagePlansOutput, error) {
	ret := m.ctrl.Call(m, "GetUsagePlans", arg0)
	ret0, _ := ret[0].(*apigateway.GetUsagePlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsagePlans indicates an expected call of GetUsagePlans
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlans(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlans", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlans), arg0)
}

// GetUsagePlansWithContext mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlansWithContext(arg0 aws.Context, arg1 *apigateway.GetUsagePlansInput, arg2 ...request.Option) (*apigateway.GetUsagePlansOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsagePlansWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.GetUsagePlansOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsagePlansWithContext indicates an expected call of GetUsagePlansWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlansWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlansWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlansWithContext), varargs...)
}

// GetUsagePlansRequest mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlansRequest(arg0 *apigateway.GetUsagePlansInput) (*request.Request, *apigateway.GetUsagePlansOutput) {
	ret := m.ctrl.Call(m, "GetUsagePlansRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.GetUsagePlansOutput)
	return ret0, ret1
}

// GetUsagePlansRequest indicates an expected call of GetUsagePlansRequest
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlansRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlansRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlansRequest), arg0)
}

// GetUsagePlansPages mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlansPages(arg0 *apigateway.GetUsagePlansInput, arg1 func(*apigateway.GetUsagePlansOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "GetUsagePlansPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUsagePlansPages indicates an expected call of GetUsagePlansPages
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlansPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlansPages", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlansPages), arg0, arg1)
}

// GetUsagePlansPagesWithContext mocks base method
func (m *MockAPIGatewayAPI) GetUsagePlansPagesWithContext(arg0 aws.Context, arg1 *apigateway.GetUsagePlansInput, arg2 func(*apigateway.GetUsagePlansOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsagePlansPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUsagePlansPagesWithContext indicates an expected call of GetUsagePlansPagesWithContext
func (mr *MockAPIGatewayAPIMockRecorder) GetUsagePlansPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsagePlansPagesWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).GetUsagePlansPagesWithContext), varargs...)
}

// ImportApiKeys mocks base method
func (m *MockAPIGatewayAPI) ImportApiKeys(arg0 *apigateway.ImportApiKeysInput) (*apigateway.ImportApiKeysOutput, error) {
	ret := m.ctrl.Call(m, "ImportApiKeys", arg0)
	ret0, _ := ret[0].(*apigateway.ImportApiKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportApiKeys indicates an expected call of ImportApiKeys
func (mr *MockAPIGatewayAPIMockRecorder) ImportApiKeys(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportApiKeys", reflect.TypeOf((*MockAPIGatewayAPI)(nil).ImportApiKeys), arg0)
}

// ImportApiKeysWithContext mocks base method
func (m *MockAPIGatewayAPI) ImportApiKeysWithContext(arg0 aws.Context, arg1 *apigateway.ImportApiKeysInput, arg2 ...request.Option) (*apigateway.ImportApiKeysOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportApiKeysWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.ImportApiKeysOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportApiKeysWithContext indicates an expected call of ImportApiKeysWithContext
func (mr *MockAPIGatewayAPIMockRecorder) ImportApiKeysWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportApiKeysWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).ImportApiKeysWithContext), varargs...)
}

// ImportApiKeysRequest mocks base method
func (m *MockAPIGatewayAPI) ImportApiKeysRequest(arg0 *apigateway.ImportApiKeysInput) (*request.Request, *apigateway.ImportApiKeysOutput) {
	ret := m.ctrl.Call(m, "ImportApiKeysRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.ImportApiKeysOutput)
	return ret0, ret1
}

// ImportApiKeysRequest indicates an expected call of ImportApiKeysRequest
func (mr *MockAPIGatewayAPIMockRecorder) ImportApiKeysRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportApiKeysRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).ImportApiKeysRequest), arg0)
}

// ImportDocumentationParts mocks base method
func (m *MockAPIGatewayAPI) ImportDocumentationParts(arg0 *apigateway.ImportDocumentationPartsInput) (*apigateway.ImportDocumentationPartsOutput, error) {
	ret := m.ctrl.Call(m, "ImportDocumentationParts", arg0)
	ret0, _ := ret[0].(*apigateway.ImportDocumentationPartsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDocumentationParts indicates an expected call of ImportDocumentationParts
func (mr *MockAPIGatewayAPIMockRecorder) ImportDocumentationParts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDocumentationParts", reflect.TypeOf((*MockAPIGatewayAPI)(nil).ImportDocumentationParts), arg0)
}

// ImportDocumentationPartsWithContext mocks base method
func (m *MockAPIGatewayAPI) ImportDocumentationPartsWithContext(arg0 aws.Context, arg1 *apigateway.ImportDocumentationPartsInput, arg2 ...request.Option) (*apigateway.ImportDocumentationPartsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportDocumentationPartsWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.ImportDocumentationPartsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDocumentationPartsWithContext indicates an expected call of ImportDocumentationPartsWithContext
func (mr *MockAPIGatewayAPIMockRecorder) ImportDocumentationPartsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDocumentationPartsWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).ImportDocumentationPartsWithContext), varargs...)
}

// ImportDocumentationPartsRequest mocks base method
func (m *MockAPIGatewayAPI) ImportDocumentationPartsRequest(arg0 *apigateway.ImportDocumentationPartsInput) (*request.Request, *apigateway.ImportDocumentationPartsOutput) {
	ret := m.ctrl.Call(m, "ImportDocumentationPartsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.ImportDocumentationPartsOutput)
	return ret0, ret1
}

// ImportDocumentationPartsRequest indicates an expected call of ImportDocumentationPartsRequest
func (mr *MockAPIGatewayAPIMockRecorder) ImportDocumentationPartsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDocumentationPartsRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).ImportDocumentationPartsRequest), arg0)
}

// ImportRestApi mocks base method
func (m *MockAPIGatewayAPI) ImportRestApi(arg0 *apigateway.ImportRestApiInput) (*apigateway.RestApi, error) {
	ret := m.ctrl.Call(m, "ImportRestApi", arg0)
	ret0, _ := ret[0].(*apigateway.RestApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportRestApi indicates an expected call of ImportRestApi
func (mr *MockAPIGatewayAPIMockRecorder) ImportRestApi(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRestApi", reflect.TypeOf((*MockAPIGatewayAPI)(nil).ImportRestApi), arg0)
}

// ImportRestApiWithContext mocks base method
func (m *MockAPIGatewayAPI) ImportRestApiWithContext(arg0 aws.Context, arg1 *apigateway.ImportRestApiInput, arg2 ...request.Option) (*apigateway.RestApi, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportRestApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.RestApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportRestApiWithContext indicates an expected call of ImportRestApiWithContext
func (mr *MockAPIGatewayAPIMockRecorder) ImportRestApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRestApiWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).ImportRestApiWithContext), varargs...)
}

// ImportRestApiRequest mocks base method
func (m *MockAPIGatewayAPI) ImportRestApiRequest(arg0 *apigateway.ImportRestApiInput) (*request.Request, *apigateway.RestApi) {
	ret := m.ctrl.Call(m, "ImportRestApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.RestApi)
	return ret0, ret1
}

// ImportRestApiRequest indicates an expected call of ImportRestApiRequest
func (mr *MockAPIGatewayAPIMockRecorder) ImportRestApiRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRestApiRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).ImportRestApiRequest), arg0)
}

// PutGatewayResponse mocks base method
func (m *MockAPIGatewayAPI) PutGatewayResponse(arg0 *apigateway.PutGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	ret := m.ctrl.Call(m, "PutGatewayResponse", arg0)
	ret0, _ := ret[0].(*apigateway.UpdateGatewayResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGatewayResponse indicates an expected call of PutGatewayResponse
func (mr *MockAPIGatewayAPIMockRecorder) PutGatewayResponse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGatewayResponse", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutGatewayResponse), arg0)
}

// PutGatewayResponseWithContext mocks base method
func (m *MockAPIGatewayAPI) PutGatewayResponseWithContext(arg0 aws.Context, arg1 *apigateway.PutGatewayResponseInput, arg2 ...request.Option) (*apigateway.UpdateGatewayResponseOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutGatewayResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.UpdateGatewayResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGatewayResponseWithContext indicates an expected call of PutGatewayResponseWithContext
func (mr *MockAPIGatewayAPIMockRecorder) PutGatewayResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGatewayResponseWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutGatewayResponseWithContext), varargs...)
}

// PutGatewayResponseRequest mocks base method
func (m *MockAPIGatewayAPI) PutGatewayResponseRequest(arg0 *apigateway.PutGatewayResponseInput) (*request.Request, *apigateway.UpdateGatewayResponseOutput) {
	ret := m.ctrl.Call(m, "PutGatewayResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.UpdateGatewayResponseOutput)
	return ret0, ret1
}

// PutGatewayResponseRequest indicates an expected call of PutGatewayResponseRequest
func (mr *MockAPIGatewayAPIMockRecorder) PutGatewayResponseRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGatewayResponseRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutGatewayResponseRequest), arg0)
}

// PutIntegration mocks base method
func (m *MockAPIGatewayAPI) PutIntegration(arg0 *apigateway.PutIntegrationInput) (*apigateway.Integration, error) {
	ret := m.ctrl.Call(m, "PutIntegration", arg0)
	ret0, _ := ret[0].(*apigateway.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutIntegration indicates an expected call of PutIntegration
func (mr *MockAPIGatewayAPIMockRecorder) PutIntegration(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIntegration", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutIntegration), arg0)
}

// PutIntegrationWithContext mocks base method
func (m *MockAPIGatewayAPI) PutIntegrationWithContext(arg0 aws.Context, arg1 *apigateway.PutIntegrationInput, arg2 ...request.Option) (*apigateway.Integration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutIntegrationWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutIntegrationWithContext indicates an expected call of PutIntegrationWithContext
func (mr *MockAPIGatewayAPIMockRecorder) PutIntegrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIntegrationWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutIntegrationWithContext), varargs...)
}

// PutIntegrationRequest mocks base method
func (m *MockAPIGatewayAPI) PutIntegrationRequest(arg0 *apigateway.PutIntegrationInput) (*request.Request, *apigateway.Integration) {
	ret := m.ctrl.Call(m, "PutIntegrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Integration)
	return ret0, ret1
}

// PutIntegrationRequest indicates an expected call of PutIntegrationRequest
func (mr *MockAPIGatewayAPIMockRecorder) PutIntegrationRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIntegrationRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutIntegrationRequest), arg0)
}

// PutIntegrationResponse mocks base method
func (m *MockAPIGatewayAPI) PutIntegrationResponse(arg0 *apigateway.PutIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	ret := m.ctrl.Call(m, "PutIntegrationResponse", arg0)
	ret0, _ := ret[0].(*apigateway.IntegrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutIntegrationResponse indicates an expected call of PutIntegrationResponse
func (mr *MockAPIGatewayAPIMockRecorder) PutIntegrationResponse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIntegrationResponse", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutIntegrationResponse), arg0)
}

// PutIntegrationResponseWithContext mocks base method
func (m *MockAPIGatewayAPI) PutIntegrationResponseWithContext(arg0 aws.Context, arg1 *apigateway.PutIntegrationResponseInput, arg2 ...request.Option) (*apigateway.IntegrationResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutIntegrationResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.IntegrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutIntegrationResponseWithContext indicates an expected call of PutIntegrationResponseWithContext
func (mr *MockAPIGatewayAPIMockRecorder) PutIntegrationResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIntegrationResponseWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutIntegrationResponseWithContext), varargs...)
}

// PutIntegrationResponseRequest mocks base method
func (m *MockAPIGatewayAPI) PutIntegrationResponseRequest(arg0 *apigateway.PutIntegrationResponseInput) (*request.Request, *apigateway.IntegrationResponse) {
	ret := m.ctrl.Call(m, "PutIntegrationResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.IntegrationResponse)
	return ret0, ret1
}

// PutIntegrationResponseRequest indicates an expected call of PutIntegrationResponseRequest
func (mr *MockAPIGatewayAPIMockRecorder) PutIntegrationResponseRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIntegrationResponseRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutIntegrationResponseRequest), arg0)
}

// PutMethod mocks base method
func (m *MockAPIGatewayAPI) PutMethod(arg0 *apigateway.PutMethodInput) (*apigateway.Method, error) {
	ret := m.ctrl.Call(m, "PutMethod", arg0)
	ret0, _ := ret[0].(*apigateway.Method)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMethod indicates an expected call of PutMethod
func (mr *MockAPIGatewayAPIMockRecorder) PutMethod(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMethod", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutMethod), arg0)
}

// PutMethodWithContext mocks base method
func (m *MockAPIGatewayAPI) PutMethodWithContext(arg0 aws.Context, arg1 *apigateway.PutMethodInput, arg2 ...request.Option) (*apigateway.Method, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMethodWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Method)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMethodWithContext indicates an expected call of PutMethodWithContext
func (mr *MockAPIGatewayAPIMockRecorder) PutMethodWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMethodWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutMethodWithContext), varargs...)
}

// PutMethodRequest mocks base method
func (m *MockAPIGatewayAPI) PutMethodRequest(arg0 *apigateway.PutMethodInput) (*request.Request, *apigateway.Method) {
	ret := m.ctrl.Call(m, "PutMethodRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Method)
	return ret0, ret1
}

// PutMethodRequest indicates an expected call of PutMethodRequest
func (mr *MockAPIGatewayAPIMockRecorder) PutMethodRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMethodRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutMethodRequest), arg0)
}

// PutMethodResponse mocks base method
func (m *MockAPIGatewayAPI) PutMethodResponse(arg0 *apigateway.PutMethodResponseInput) (*apigateway.MethodResponse, error) {
	ret := m.ctrl.Call(m, "PutMethodResponse", arg0)
	ret0, _ := ret[0].(*apigateway.MethodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMethodResponse indicates an expected call of PutMethodResponse
func (mr *MockAPIGatewayAPIMockRecorder) PutMethodResponse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMethodResponse", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutMethodResponse), arg0)
}

// PutMethodResponseWithContext mocks base method
func (m *MockAPIGatewayAPI) PutMethodResponseWithContext(arg0 aws.Context, arg1 *apigateway.PutMethodResponseInput, arg2 ...request.Option) (*apigateway.MethodResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMethodResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.MethodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMethodResponseWithContext indicates an expected call of PutMethodResponseWithContext
func (mr *MockAPIGatewayAPIMockRecorder) PutMethodResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMethodResponseWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutMethodResponseWithContext), varargs...)
}

// PutMethodResponseRequest mocks base method
func (m *MockAPIGatewayAPI) PutMethodResponseRequest(arg0 *apigateway.PutMethodResponseInput) (*request.Request, *apigateway.MethodResponse) {
	ret := m.ctrl.Call(m, "PutMethodResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.MethodResponse)
	return ret0, ret1
}

// PutMethodResponseRequest indicates an expected call of PutMethodResponseRequest
func (mr *MockAPIGatewayAPIMockRecorder) PutMethodResponseRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMethodResponseRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutMethodResponseRequest), arg0)
}

// PutRestApi mocks base method
func (m *MockAPIGatewayAPI) PutRestApi(arg0 *apigateway.PutRestApiInput) (*apigateway.RestApi, error) {
	ret := m.ctrl.Call(m, "PutRestApi", arg0)
	ret0, _ := ret[0].(*apigateway.RestApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRestApi indicates an expected call of PutRestApi
func (mr *MockAPIGatewayAPIMockRecorder) PutRestApi(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRestApi", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutRestApi), arg0)
}

// PutRestApiWithContext mocks base method
func (m *MockAPIGatewayAPI) PutRestApiWithContext(arg0 aws.Context, arg1 *apigateway.PutRestApiInput, arg2 ...request.Option) (*apigateway.RestApi, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRestApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.RestApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRestApiWithContext indicates an expected call of PutRestApiWithContext
func (mr *MockAPIGatewayAPIMockRecorder) PutRestApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRestApiWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutRestApiWithContext), varargs...)
}

// PutRestApiRequest mocks base method
func (m *MockAPIGatewayAPI) PutRestApiRequest(arg0 *apigateway.PutRestApiInput) (*request.Request, *apigateway.RestApi) {
	ret := m.ctrl.Call(m, "PutRestApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.RestApi)
	return ret0, ret1
}

// PutRestApiRequest indicates an expected call of PutRestApiRequest
func (mr *MockAPIGatewayAPIMockRecorder) PutRestApiRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRestApiRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).PutRestApiRequest), arg0)
}

// TestInvokeAuthorizer mocks base method
func (m *MockAPIGatewayAPI) TestInvokeAuthorizer(arg0 *apigateway.TestInvokeAuthorizerInput) (*apigateway.TestInvokeAuthorizerOutput, error) {
	ret := m.ctrl.Call(m, "TestInvokeAuthorizer", arg0)
	ret0, _ := ret[0].(*apigateway.TestInvokeAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestInvokeAuthorizer indicates an expected call of TestInvokeAuthorizer
func (mr *MockAPIGatewayAPIMockRecorder) TestInvokeAuthorizer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestInvokeAuthorizer", reflect.TypeOf((*MockAPIGatewayAPI)(nil).TestInvokeAuthorizer), arg0)
}

// TestInvokeAuthorizerWithContext mocks base method
func (m *MockAPIGatewayAPI) TestInvokeAuthorizerWithContext(arg0 aws.Context, arg1 *apigateway.TestInvokeAuthorizerInput, arg2 ...request.Option) (*apigateway.TestInvokeAuthorizerOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestInvokeAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.TestInvokeAuthorizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestInvokeAuthorizerWithContext indicates an expected call of TestInvokeAuthorizerWithContext
func (mr *MockAPIGatewayAPIMockRecorder) TestInvokeAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestInvokeAuthorizerWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).TestInvokeAuthorizerWithContext), varargs...)
}

// TestInvokeAuthorizerRequest mocks base method
func (m *MockAPIGatewayAPI) TestInvokeAuthorizerRequest(arg0 *apigateway.TestInvokeAuthorizerInput) (*request.Request, *apigateway.TestInvokeAuthorizerOutput) {
	ret := m.ctrl.Call(m, "TestInvokeAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.TestInvokeAuthorizerOutput)
	return ret0, ret1
}

// TestInvokeAuthorizerRequest indicates an expected call of TestInvokeAuthorizerRequest
func (mr *MockAPIGatewayAPIMockRecorder) TestInvokeAuthorizerRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestInvokeAuthorizerRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).TestInvokeAuthorizerRequest), arg0)
}

// TestInvokeMethod mocks base method
func (m *MockAPIGatewayAPI) TestInvokeMethod(arg0 *apigateway.TestInvokeMethodInput) (*apigateway.TestInvokeMethodOutput, error) {
	ret := m.ctrl.Call(m, "TestInvokeMethod", arg0)
	ret0, _ := ret[0].(*apigateway.TestInvokeMethodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestInvokeMethod indicates an expected call of TestInvokeMethod
func (mr *MockAPIGatewayAPIMockRecorder) TestInvokeMethod(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestInvokeMethod", reflect.TypeOf((*MockAPIGatewayAPI)(nil).TestInvokeMethod), arg0)
}

// TestInvokeMethodWithContext mocks base method
func (m *MockAPIGatewayAPI) TestInvokeMethodWithContext(arg0 aws.Context, arg1 *apigateway.TestInvokeMethodInput, arg2 ...request.Option) (*apigateway.TestInvokeMethodOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestInvokeMethodWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.TestInvokeMethodOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestInvokeMethodWithContext indicates an expected call of TestInvokeMethodWithContext
func (mr *MockAPIGatewayAPIMockRecorder) TestInvokeMethodWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestInvokeMethodWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).TestInvokeMethodWithContext), varargs...)
}

// TestInvokeMethodRequest mocks base method
func (m *MockAPIGatewayAPI) TestInvokeMethodRequest(arg0 *apigateway.TestInvokeMethodInput) (*request.Request, *apigateway.TestInvokeMethodOutput) {
	ret := m.ctrl.Call(m, "TestInvokeMethodRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.TestInvokeMethodOutput)
	return ret0, ret1
}

// TestInvokeMethodRequest indicates an expected call of TestInvokeMethodRequest
func (mr *MockAPIGatewayAPIMockRecorder) TestInvokeMethodRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestInvokeMethodRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).TestInvokeMethodRequest), arg0)
}

// UpdateAccount mocks base method
func (m *MockAPIGatewayAPI) UpdateAccount(arg0 *apigateway.UpdateAccountInput) (*apigateway.Account, error) {
	ret := m.ctrl.Call(m, "UpdateAccount", arg0)
	ret0, _ := ret[0].(*apigateway.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockAPIGatewayAPIMockRecorder) UpdateAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateAccount), arg0)
}

// UpdateAccountWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateAccountWithContext(arg0 aws.Context, arg1 *apigateway.UpdateAccountInput, arg2 ...request.Option) (*apigateway.Account, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccountWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountWithContext indicates an expected call of UpdateAccountWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateAccountWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateAccountWithContext), varargs...)
}

// UpdateAccountRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateAccountRequest(arg0 *apigateway.UpdateAccountInput) (*request.Request, *apigateway.Account) {
	ret := m.ctrl.Call(m, "UpdateAccountRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Account)
	return ret0, ret1
}

// UpdateAccountRequest indicates an expected call of UpdateAccountRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateAccountRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateAccountRequest), arg0)
}

// UpdateApiKey mocks base method
func (m *MockAPIGatewayAPI) UpdateApiKey(arg0 *apigateway.UpdateApiKeyInput) (*apigateway.ApiKey, error) {
	ret := m.ctrl.Call(m, "UpdateApiKey", arg0)
	ret0, _ := ret[0].(*apigateway.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApiKey indicates an expected call of UpdateApiKey
func (mr *MockAPIGatewayAPIMockRecorder) UpdateApiKey(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiKey", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateApiKey), arg0)
}

// UpdateApiKeyWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateApiKeyWithContext(arg0 aws.Context, arg1 *apigateway.UpdateApiKeyInput, arg2 ...request.Option) (*apigateway.ApiKey, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApiKeyWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApiKeyWithContext indicates an expected call of UpdateApiKeyWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateApiKeyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiKeyWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateApiKeyWithContext), varargs...)
}

// UpdateApiKeyRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateApiKeyRequest(arg0 *apigateway.UpdateApiKeyInput) (*request.Request, *apigateway.ApiKey) {
	ret := m.ctrl.Call(m, "UpdateApiKeyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.ApiKey)
	return ret0, ret1
}

// UpdateApiKeyRequest indicates an expected call of UpdateApiKeyRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateApiKeyRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiKeyRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateApiKeyRequest), arg0)
}

// UpdateAuthorizer mocks base method
func (m *MockAPIGatewayAPI) UpdateAuthorizer(arg0 *apigateway.UpdateAuthorizerInput) (*apigateway.Authorizer, error) {
	ret := m.ctrl.Call(m, "UpdateAuthorizer", arg0)
	ret0, _ := ret[0].(*apigateway.Authorizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorizer indicates an expected call of UpdateAuthorizer
func (mr *MockAPIGatewayAPIMockRecorder) UpdateAuthorizer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizer", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateAuthorizer), arg0)
}

// UpdateAuthorizerWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateAuthorizerWithContext(arg0 aws.Context, arg1 *apigateway.UpdateAuthorizerInput, arg2 ...request.Option) (*apigateway.Authorizer, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAuthorizerWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Authorizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorizerWithContext indicates an expected call of UpdateAuthorizerWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateAuthorizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizerWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateAuthorizerWithContext), varargs...)
}

// UpdateAuthorizerRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateAuthorizerRequest(arg0 *apigateway.UpdateAuthorizerInput) (*request.Request, *apigateway.Authorizer) {
	ret := m.ctrl.Call(m, "UpdateAuthorizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Authorizer)
	return ret0, ret1
}

// UpdateAuthorizerRequest indicates an expected call of UpdateAuthorizerRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateAuthorizerRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizerRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateAuthorizerRequest), arg0)
}

// UpdateBasePathMapping mocks base method
func (m *MockAPIGatewayAPI) UpdateBasePathMapping(arg0 *apigateway.UpdateBasePathMappingInput) (*apigateway.BasePathMapping, error) {
	ret := m.ctrl.Call(m, "UpdateBasePathMapping", arg0)
	ret0, _ := ret[0].(*apigateway.BasePathMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBasePathMapping indicates an expected call of UpdateBasePathMapping
func (mr *MockAPIGatewayAPIMockRecorder) UpdateBasePathMapping(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasePathMapping", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateBasePathMapping), arg0)
}

// UpdateBasePathMappingWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateBasePathMappingWithContext(arg0 aws.Context, arg1 *apigateway.UpdateBasePathMappingInput, arg2 ...request.Option) (*apigateway.BasePathMapping, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBasePathMappingWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.BasePathMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBasePathMappingWithContext indicates an expected call of UpdateBasePathMappingWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateBasePathMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasePathMappingWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateBasePathMappingWithContext), varargs...)
}

// UpdateBasePathMappingRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateBasePathMappingRequest(arg0 *apigateway.UpdateBasePathMappingInput) (*request.Request, *apigateway.BasePathMapping) {
	ret := m.ctrl.Call(m, "UpdateBasePathMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.BasePathMapping)
	return ret0, ret1
}

// UpdateBasePathMappingRequest indicates an expected call of UpdateBasePathMappingRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateBasePathMappingRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasePathMappingRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateBasePathMappingRequest), arg0)
}

// UpdateClientCertificate mocks base method
func (m *MockAPIGatewayAPI) UpdateClientCertificate(arg0 *apigateway.UpdateClientCertificateInput) (*apigateway.ClientCertificate, error) {
	ret := m.ctrl.Call(m, "UpdateClientCertificate", arg0)
	ret0, _ := ret[0].(*apigateway.ClientCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClientCertificate indicates an expected call of UpdateClientCertificate
func (mr *MockAPIGatewayAPIMockRecorder) UpdateClientCertificate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientCertificate", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateClientCertificate), arg0)
}

// UpdateClientCertificateWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateClientCertificateWithContext(arg0 aws.Context, arg1 *apigateway.UpdateClientCertificateInput, arg2 ...request.Option) (*apigateway.ClientCertificate, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClientCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.ClientCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClientCertificateWithContext indicates an expected call of UpdateClientCertificateWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateClientCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientCertificateWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateClientCertificateWithContext), varargs...)
}

// UpdateClientCertificateRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateClientCertificateRequest(arg0 *apigateway.UpdateClientCertificateInput) (*request.Request, *apigateway.ClientCertificate) {
	ret := m.ctrl.Call(m, "UpdateClientCertificateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.ClientCertificate)
	return ret0, ret1
}

// UpdateClientCertificateRequest indicates an expected call of UpdateClientCertificateRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateClientCertificateRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientCertificateRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateClientCertificateRequest), arg0)
}

// UpdateDeployment mocks base method
func (m *MockAPIGatewayAPI) UpdateDeployment(arg0 *apigateway.UpdateDeploymentInput) (*apigateway.Deployment, error) {
	ret := m.ctrl.Call(m, "UpdateDeployment", arg0)
	ret0, _ := ret[0].(*apigateway.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeployment indicates an expected call of UpdateDeployment
func (mr *MockAPIGatewayAPIMockRecorder) UpdateDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateDeployment), arg0)
}

// UpdateDeploymentWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateDeploymentWithContext(arg0 aws.Context, arg1 *apigateway.UpdateDeploymentInput, arg2 ...request.Option) (*apigateway.Deployment, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDeploymentWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeploymentWithContext indicates an expected call of UpdateDeploymentWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateDeploymentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateDeploymentWithContext), varargs...)
}

// UpdateDeploymentRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateDeploymentRequest(arg0 *apigateway.UpdateDeploymentInput) (*request.Request, *apigateway.Deployment) {
	ret := m.ctrl.Call(m, "UpdateDeploymentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Deployment)
	return ret0, ret1
}

// UpdateDeploymentRequest indicates an expected call of UpdateDeploymentRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateDeploymentRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateDeploymentRequest), arg0)
}

// UpdateDocumentationPart mocks base method
func (m *MockAPIGatewayAPI) UpdateDocumentationPart(arg0 *apigateway.UpdateDocumentationPartInput) (*apigateway.DocumentationPart, error) {
	ret := m.ctrl.Call(m, "UpdateDocumentationPart", arg0)
	ret0, _ := ret[0].(*apigateway.DocumentationPart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentationPart indicates an expected call of UpdateDocumentationPart
func (mr *MockAPIGatewayAPIMockRecorder) UpdateDocumentationPart(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentationPart", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateDocumentationPart), arg0)
}

// UpdateDocumentationPartWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateDocumentationPartWithContext(arg0 aws.Context, arg1 *apigateway.UpdateDocumentationPartInput, arg2 ...request.Option) (*apigateway.DocumentationPart, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocumentationPartWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DocumentationPart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentationPartWithContext indicates an expected call of UpdateDocumentationPartWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateDocumentationPartWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentationPartWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateDocumentationPartWithContext), varargs...)
}

// UpdateDocumentationPartRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateDocumentationPartRequest(arg0 *apigateway.UpdateDocumentationPartInput) (*request.Request, *apigateway.DocumentationPart) {
	ret := m.ctrl.Call(m, "UpdateDocumentationPartRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DocumentationPart)
	return ret0, ret1
}

// UpdateDocumentationPartRequest indicates an expected call of UpdateDocumentationPartRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateDocumentationPartRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentationPartRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateDocumentationPartRequest), arg0)
}

// UpdateDocumentationVersion mocks base method
func (m *MockAPIGatewayAPI) UpdateDocumentationVersion(arg0 *apigateway.UpdateDocumentationVersionInput) (*apigateway.DocumentationVersion, error) {
	ret := m.ctrl.Call(m, "UpdateDocumentationVersion", arg0)
	ret0, _ := ret[0].(*apigateway.DocumentationVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentationVersion indicates an expected call of UpdateDocumentationVersion
func (mr *MockAPIGatewayAPIMockRecorder) UpdateDocumentationVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentationVersion", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateDocumentationVersion), arg0)
}

// UpdateDocumentationVersionWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateDocumentationVersionWithContext(arg0 aws.Context, arg1 *apigateway.UpdateDocumentationVersionInput, arg2 ...request.Option) (*apigateway.DocumentationVersion, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocumentationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DocumentationVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentationVersionWithContext indicates an expected call of UpdateDocumentationVersionWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateDocumentationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentationVersionWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateDocumentationVersionWithContext), varargs...)
}

// UpdateDocumentationVersionRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateDocumentationVersionRequest(arg0 *apigateway.UpdateDocumentationVersionInput) (*request.Request, *apigateway.DocumentationVersion) {
	ret := m.ctrl.Call(m, "UpdateDocumentationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DocumentationVersion)
	return ret0, ret1
}

// UpdateDocumentationVersionRequest indicates an expected call of UpdateDocumentationVersionRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateDocumentationVersionRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentationVersionRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateDocumentationVersionRequest), arg0)
}

// UpdateDomainName mocks base method
func (m *MockAPIGatewayAPI) UpdateDomainName(arg0 *apigateway.UpdateDomainNameInput) (*apigateway.DomainName, error) {
	ret := m.ctrl.Call(m, "UpdateDomainName", arg0)
	ret0, _ := ret[0].(*apigateway.DomainName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainName indicates an expected call of UpdateDomainName
func (mr *MockAPIGatewayAPIMockRecorder) UpdateDomainName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainName", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateDomainName), arg0)
}

// UpdateDomainNameWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateDomainNameWithContext(arg0 aws.Context, arg1 *apigateway.UpdateDomainNameInput, arg2 ...request.Option) (*apigateway.DomainName, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomainNameWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.DomainName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDomainNameWithContext indicates an expected call of UpdateDomainNameWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateDomainNameWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainNameWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateDomainNameWithContext), varargs...)
}

// UpdateDomainNameRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateDomainNameRequest(arg0 *apigateway.UpdateDomainNameInput) (*request.Request, *apigateway.DomainName) {
	ret := m.ctrl.Call(m, "UpdateDomainNameRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.DomainName)
	return ret0, ret1
}

// UpdateDomainNameRequest indicates an expected call of UpdateDomainNameRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateDomainNameRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainNameRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateDomainNameRequest), arg0)
}

// UpdateGatewayResponse mocks base method
func (m *MockAPIGatewayAPI) UpdateGatewayResponse(arg0 *apigateway.UpdateGatewayResponseInput) (*apigateway.UpdateGatewayResponseOutput, error) {
	ret := m.ctrl.Call(m, "UpdateGatewayResponse", arg0)
	ret0, _ := ret[0].(*apigateway.UpdateGatewayResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGatewayResponse indicates an expected call of UpdateGatewayResponse
func (mr *MockAPIGatewayAPIMockRecorder) UpdateGatewayResponse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayResponse", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateGatewayResponse), arg0)
}

// UpdateGatewayResponseWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateGatewayResponseWithContext(arg0 aws.Context, arg1 *apigateway.UpdateGatewayResponseInput, arg2 ...request.Option) (*apigateway.UpdateGatewayResponseOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGatewayResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.UpdateGatewayResponseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGatewayResponseWithContext indicates an expected call of UpdateGatewayResponseWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateGatewayResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayResponseWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateGatewayResponseWithContext), varargs...)
}

// UpdateGatewayResponseRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateGatewayResponseRequest(arg0 *apigateway.UpdateGatewayResponseInput) (*request.Request, *apigateway.UpdateGatewayResponseOutput) {
	ret := m.ctrl.Call(m, "UpdateGatewayResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.UpdateGatewayResponseOutput)
	return ret0, ret1
}

// UpdateGatewayResponseRequest indicates an expected call of UpdateGatewayResponseRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateGatewayResponseRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGatewayResponseRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateGatewayResponseRequest), arg0)
}

// UpdateIntegration mocks base method
func (m *MockAPIGatewayAPI) UpdateIntegration(arg0 *apigateway.UpdateIntegrationInput) (*apigateway.Integration, error) {
	ret := m.ctrl.Call(m, "UpdateIntegration", arg0)
	ret0, _ := ret[0].(*apigateway.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIntegration indicates an expected call of UpdateIntegration
func (mr *MockAPIGatewayAPIMockRecorder) UpdateIntegration(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegration", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateIntegration), arg0)
}

// UpdateIntegrationWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateIntegrationWithContext(arg0 aws.Context, arg1 *apigateway.UpdateIntegrationInput, arg2 ...request.Option) (*apigateway.Integration, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIntegrationWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIntegrationWithContext indicates an expected call of UpdateIntegrationWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateIntegrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegrationWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateIntegrationWithContext), varargs...)
}

// UpdateIntegrationRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateIntegrationRequest(arg0 *apigateway.UpdateIntegrationInput) (*request.Request, *apigateway.Integration) {
	ret := m.ctrl.Call(m, "UpdateIntegrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Integration)
	return ret0, ret1
}

// UpdateIntegrationRequest indicates an expected call of UpdateIntegrationRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateIntegrationRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegrationRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateIntegrationRequest), arg0)
}

// UpdateIntegrationResponse mocks base method
func (m *MockAPIGatewayAPI) UpdateIntegrationResponse(arg0 *apigateway.UpdateIntegrationResponseInput) (*apigateway.IntegrationResponse, error) {
	ret := m.ctrl.Call(m, "UpdateIntegrationResponse", arg0)
	ret0, _ := ret[0].(*apigateway.IntegrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIntegrationResponse indicates an expected call of UpdateIntegrationResponse
func (mr *MockAPIGatewayAPIMockRecorder) UpdateIntegrationResponse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegrationResponse", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateIntegrationResponse), arg0)
}

// UpdateIntegrationResponseWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateIntegrationResponseWithContext(arg0 aws.Context, arg1 *apigateway.UpdateIntegrationResponseInput, arg2 ...request.Option) (*apigateway.IntegrationResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIntegrationResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.IntegrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIntegrationResponseWithContext indicates an expected call of UpdateIntegrationResponseWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateIntegrationResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegrationResponseWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateIntegrationResponseWithContext), varargs...)
}

// UpdateIntegrationResponseRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateIntegrationResponseRequest(arg0 *apigateway.UpdateIntegrationResponseInput) (*request.Request, *apigateway.IntegrationResponse) {
	ret := m.ctrl.Call(m, "UpdateIntegrationResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.IntegrationResponse)
	return ret0, ret1
}

// UpdateIntegrationResponseRequest indicates an expected call of UpdateIntegrationResponseRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateIntegrationResponseRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegrationResponseRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateIntegrationResponseRequest), arg0)
}

// UpdateMethod mocks base method
func (m *MockAPIGatewayAPI) UpdateMethod(arg0 *apigateway.UpdateMethodInput) (*apigateway.Method, error) {
	ret := m.ctrl.Call(m, "UpdateMethod", arg0)
	ret0, _ := ret[0].(*apigateway.Method)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMethod indicates an expected call of UpdateMethod
func (mr *MockAPIGatewayAPIMockRecorder) UpdateMethod(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMethod", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateMethod), arg0)
}

// UpdateMethodWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateMethodWithContext(arg0 aws.Context, arg1 *apigateway.UpdateMethodInput, arg2 ...request.Option) (*apigateway.Method, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMethodWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Method)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMethodWithContext indicates an expected call of UpdateMethodWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateMethodWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMethodWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateMethodWithContext), varargs...)
}

// UpdateMethodRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateMethodRequest(arg0 *apigateway.UpdateMethodInput) (*request.Request, *apigateway.Method) {
	ret := m.ctrl.Call(m, "UpdateMethodRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Method)
	return ret0, ret1
}

// UpdateMethodRequest indicates an expected call of UpdateMethodRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateMethodRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMethodRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateMethodRequest), arg0)
}

// UpdateMethodResponse mocks base method
func (m *MockAPIGatewayAPI) UpdateMethodResponse(arg0 *apigateway.UpdateMethodResponseInput) (*apigateway.MethodResponse, error) {
	ret := m.ctrl.Call(m, "UpdateMethodResponse", arg0)
	ret0, _ := ret[0].(*apigateway.MethodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMethodResponse indicates an expected call of UpdateMethodResponse
func (mr *MockAPIGatewayAPIMockRecorder) UpdateMethodResponse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMethodResponse", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateMethodResponse), arg0)
}

// UpdateMethodResponseWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateMethodResponseWithContext(arg0 aws.Context, arg1 *apigateway.UpdateMethodResponseInput, arg2 ...request.Option) (*apigateway.MethodResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMethodResponseWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.MethodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMethodResponseWithContext indicates an expected call of UpdateMethodResponseWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateMethodResponseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMethodResponseWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateMethodResponseWithContext), varargs...)
}

// UpdateMethodResponseRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateMethodResponseRequest(arg0 *apigateway.UpdateMethodResponseInput) (*request.Request, *apigateway.MethodResponse) {
	ret := m.ctrl.Call(m, "UpdateMethodResponseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.MethodResponse)
	return ret0, ret1
}

// UpdateMethodResponseRequest indicates an expected call of UpdateMethodResponseRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateMethodResponseRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMethodResponseRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateMethodResponseRequest), arg0)
}

// UpdateModel mocks base method
func (m *MockAPIGatewayAPI) UpdateModel(arg0 *apigateway.UpdateModelInput) (*apigateway.Model, error) {
	ret := m.ctrl.Call(m, "UpdateModel", arg0)
	ret0, _ := ret[0].(*apigateway.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModel indicates an expected call of UpdateModel
func (mr *MockAPIGatewayAPIMockRecorder) UpdateModel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModel", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateModel), arg0)
}

// UpdateModelWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateModelWithContext(arg0 aws.Context, arg1 *apigateway.UpdateModelInput, arg2 ...request.Option) (*apigateway.Model, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModelWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelWithContext indicates an expected call of UpdateModelWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateModelWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateModelWithContext), varargs...)
}

// UpdateModelRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateModelRequest(arg0 *apigateway.UpdateModelInput) (*request.Request, *apigateway.Model) {
	ret := m.ctrl.Call(m, "UpdateModelRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Model)
	return ret0, ret1
}

// UpdateModelRequest indicates an expected call of UpdateModelRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateModelRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateModelRequest), arg0)
}

// UpdateRequestValidator mocks base method
func (m *MockAPIGatewayAPI) UpdateRequestValidator(arg0 *apigateway.UpdateRequestValidatorInput) (*apigateway.UpdateRequestValidatorOutput, error) {
	ret := m.ctrl.Call(m, "UpdateRequestValidator", arg0)
	ret0, _ := ret[0].(*apigateway.UpdateRequestValidatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRequestValidator indicates an expected call of UpdateRequestValidator
func (mr *MockAPIGatewayAPIMockRecorder) UpdateRequestValidator(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestValidator", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateRequestValidator), arg0)
}

// UpdateRequestValidatorWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateRequestValidatorWithContext(arg0 aws.Context, arg1 *apigateway.UpdateRequestValidatorInput, arg2 ...request.Option) (*apigateway.UpdateRequestValidatorOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRequestValidatorWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.UpdateRequestValidatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRequestValidatorWithContext indicates an expected call of UpdateRequestValidatorWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateRequestValidatorWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestValidatorWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateRequestValidatorWithContext), varargs...)
}

// UpdateRequestValidatorRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateRequestValidatorRequest(arg0 *apigateway.UpdateRequestValidatorInput) (*request.Request, *apigateway.UpdateRequestValidatorOutput) {
	ret := m.ctrl.Call(m, "UpdateRequestValidatorRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.UpdateRequestValidatorOutput)
	return ret0, ret1
}

// UpdateRequestValidatorRequest indicates an expected call of UpdateRequestValidatorRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateRequestValidatorRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestValidatorRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateRequestValidatorRequest), arg0)
}

// UpdateResource mocks base method
func (m *MockAPIGatewayAPI) UpdateResource(arg0 *apigateway.UpdateResourceInput) (*apigateway.Resource, error) {
	ret := m.ctrl.Call(m, "UpdateResource", arg0)
	ret0, _ := ret[0].(*apigateway.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource
func (mr *MockAPIGatewayAPIMockRecorder) UpdateResource(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateResource), arg0)
}

// UpdateResourceWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateResourceWithContext(arg0 aws.Context, arg1 *apigateway.UpdateResourceInput, arg2 ...request.Option) (*apigateway.Resource, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResourceWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceWithContext indicates an expected call of UpdateResourceWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateResourceWithContext), varargs...)
}

// UpdateResourceRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateResourceRequest(arg0 *apigateway.UpdateResourceInput) (*request.Request, *apigateway.Resource) {
	ret := m.ctrl.Call(m, "UpdateResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Resource)
	return ret0, ret1
}

// UpdateResourceRequest indicates an expected call of UpdateResourceRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateResourceRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateResourceRequest), arg0)
}

// UpdateRestApi mocks base method
func (m *MockAPIGatewayAPI) UpdateRestApi(arg0 *apigateway.UpdateRestApiInput) (*apigateway.RestApi, error) {
	ret := m.ctrl.Call(m, "UpdateRestApi", arg0)
	ret0, _ := ret[0].(*apigateway.RestApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRestApi indicates an expected call of UpdateRestApi
func (mr *MockAPIGatewayAPIMockRecorder) UpdateRestApi(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestApi", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateRestApi), arg0)
}

// UpdateRestApiWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateRestApiWithContext(arg0 aws.Context, arg1 *apigateway.UpdateRestApiInput, arg2 ...request.Option) (*apigateway.RestApi, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRestApiWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.RestApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRestApiWithContext indicates an expected call of UpdateRestApiWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateRestApiWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestApiWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateRestApiWithContext), varargs...)
}

// UpdateRestApiRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateRestApiRequest(arg0 *apigateway.UpdateRestApiInput) (*request.Request, *apigateway.RestApi) {
	ret := m.ctrl.Call(m, "UpdateRestApiRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.RestApi)
	return ret0, ret1
}

// UpdateRestApiRequest indicates an expected call of UpdateRestApiRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateRestApiRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestApiRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateRestApiRequest), arg0)
}

// UpdateStage mocks base method
func (m *MockAPIGatewayAPI) UpdateStage(arg0 *apigateway.UpdateStageInput) (*apigateway.Stage, error) {
	ret := m.ctrl.Call(m, "UpdateStage", arg0)
	ret0, _ := ret[0].(*apigateway.Stage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStage indicates an expected call of UpdateStage
func (mr *MockAPIGatewayAPIMockRecorder) UpdateStage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStage", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateStage), arg0)
}

// UpdateStageWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateStageWithContext(arg0 aws.Context, arg1 *apigateway.UpdateStageInput, arg2 ...request.Option) (*apigateway.Stage, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStageWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Stage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStageWithContext indicates an expected call of UpdateStageWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateStageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStageWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateStageWithContext), varargs...)
}

// UpdateStageRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateStageRequest(arg0 *apigateway.UpdateStageInput) (*request.Request, *apigateway.Stage) {
	ret := m.ctrl.Call(m, "UpdateStageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Stage)
	return ret0, ret1
}

// UpdateStageRequest indicates an expected call of UpdateStageRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateStageRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStageRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateStageRequest), arg0)
}

// UpdateUsage mocks base method
func (m *MockAPIGatewayAPI) UpdateUsage(arg0 *apigateway.UpdateUsageInput) (*apigateway.Usage, error) {
	ret := m.ctrl.Call(m, "UpdateUsage", arg0)
	ret0, _ := ret[0].(*apigateway.Usage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsage indicates an expected call of UpdateUsage
func (mr *MockAPIGatewayAPIMockRecorder) UpdateUsage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsage", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateUsage), arg0)
}

// UpdateUsageWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateUsageWithContext(arg0 aws.Context, arg1 *apigateway.UpdateUsageInput, arg2 ...request.Option) (*apigateway.Usage, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUsageWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.Usage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsageWithContext indicates an expected call of UpdateUsageWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateUsageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsageWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateUsageWithContext), varargs...)
}

// UpdateUsageRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateUsageRequest(arg0 *apigateway.UpdateUsageInput) (*request.Request, *apigateway.Usage) {
	ret := m.ctrl.Call(m, "UpdateUsageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.Usage)
	return ret0, ret1
}

// UpdateUsageRequest indicates an expected call of UpdateUsageRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateUsageRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsageRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateUsageRequest), arg0)
}

// UpdateUsagePlan mocks base method
func (m *MockAPIGatewayAPI) UpdateUsagePlan(arg0 *apigateway.UpdateUsagePlanInput) (*apigateway.UsagePlan, error) {
	ret := m.ctrl.Call(m, "UpdateUsagePlan", arg0)
	ret0, _ := ret[0].(*apigateway.UsagePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsagePlan indicates an expected call of UpdateUsagePlan
func (mr *MockAPIGatewayAPIMockRecorder) UpdateUsagePlan(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsagePlan", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateUsagePlan), arg0)
}

// UpdateUsagePlanWithContext mocks base method
func (m *MockAPIGatewayAPI) UpdateUsagePlanWithContext(arg0 aws.Context, arg1 *apigateway.UpdateUsagePlanInput, arg2 ...request.Option) (*apigateway.UsagePlan, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUsagePlanWithContext", varargs...)
	ret0, _ := ret[0].(*apigateway.UsagePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsagePlanWithContext indicates an expected call of UpdateUsagePlanWithContext
func (mr *MockAPIGatewayAPIMockRecorder) UpdateUsagePlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsagePlanWithContext", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateUsagePlanWithContext), varargs...)
}

// UpdateUsagePlanRequest mocks base method
func (m *MockAPIGatewayAPI) UpdateUsagePlanRequest(arg0 *apigateway.UpdateUsagePlanInput) (*request.Request, *apigateway.UsagePlan) {
	ret := m.ctrl.Call(m, "UpdateUsagePlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*apigateway.UsagePlan)
	return ret0, ret1
}

// UpdateUsagePlanRequest indicates an expected call of UpdateUsagePlanRequest
func (mr *MockAPIGatewayAPIMockRecorder) UpdateUsagePlanRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsagePlanRequest", reflect.TypeOf((*MockAPIGatewayAPI)(nil).UpdateUsagePlanRequest), arg0)
}
